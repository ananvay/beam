// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beam_fn_api.proto

package fnexecution_v1

import (
	context "context"
	fmt "fmt"
	pipeline_v1 "github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MonitoringInfoSpecs_Enum int32

const (
	// TODO(ajamato): Add the PTRANSFORM name as a required label after
	// upgrading the python SDK.
	MonitoringInfoSpecs_USER_COUNTER         MonitoringInfoSpecs_Enum = 0
	MonitoringInfoSpecs_ELEMENT_COUNT        MonitoringInfoSpecs_Enum = 1
	MonitoringInfoSpecs_START_BUNDLE_MSECS   MonitoringInfoSpecs_Enum = 2
	MonitoringInfoSpecs_PROCESS_BUNDLE_MSECS MonitoringInfoSpecs_Enum = 3
	MonitoringInfoSpecs_FINISH_BUNDLE_MSECS  MonitoringInfoSpecs_Enum = 4
	MonitoringInfoSpecs_TOTAL_MSECS          MonitoringInfoSpecs_Enum = 5
)

var MonitoringInfoSpecs_Enum_name = map[int32]string{
	0: "USER_COUNTER",
	1: "ELEMENT_COUNT",
	2: "START_BUNDLE_MSECS",
	3: "PROCESS_BUNDLE_MSECS",
	4: "FINISH_BUNDLE_MSECS",
	5: "TOTAL_MSECS",
}

var MonitoringInfoSpecs_Enum_value = map[string]int32{
	"USER_COUNTER":         0,
	"ELEMENT_COUNT":        1,
	"START_BUNDLE_MSECS":   2,
	"PROCESS_BUNDLE_MSECS": 3,
	"FINISH_BUNDLE_MSECS":  4,
	"TOTAL_MSECS":          5,
}

func (x MonitoringInfoSpecs_Enum) String() string {
	return proto.EnumName(MonitoringInfoSpecs_Enum_name, int32(x))
}

func (MonitoringInfoSpecs_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{14, 0}
}

type MonitoringInfo_MonitoringInfoLabels int32

const (
	// TODO(ajamato): Rename all references to TRANSFORM to PTRANSFORM
	MonitoringInfo_TRANSFORM          MonitoringInfo_MonitoringInfoLabels = 0
	MonitoringInfo_PCOLLECTION        MonitoringInfo_MonitoringInfoLabels = 1
	MonitoringInfo_WINDOWING_STRATEGY MonitoringInfo_MonitoringInfoLabels = 2
	MonitoringInfo_CODER              MonitoringInfo_MonitoringInfoLabels = 3
	MonitoringInfo_ENVIRONMENT        MonitoringInfo_MonitoringInfoLabels = 4
)

var MonitoringInfo_MonitoringInfoLabels_name = map[int32]string{
	0: "TRANSFORM",
	1: "PCOLLECTION",
	2: "WINDOWING_STRATEGY",
	3: "CODER",
	4: "ENVIRONMENT",
}

var MonitoringInfo_MonitoringInfoLabels_value = map[string]int32{
	"TRANSFORM":          0,
	"PCOLLECTION":        1,
	"WINDOWING_STRATEGY": 2,
	"CODER":              3,
	"ENVIRONMENT":        4,
}

func (x MonitoringInfo_MonitoringInfoLabels) String() string {
	return proto.EnumName(MonitoringInfo_MonitoringInfoLabels_name, int32(x))
}

func (MonitoringInfo_MonitoringInfoLabels) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{16, 0}
}

type MonitoringInfoUrns_Enum int32

const (
	// User counter have this format: 'beam:metric:user:<namespace>:<name>'.
	MonitoringInfoUrns_USER_COUNTER_URN_PREFIX MonitoringInfoUrns_Enum = 0
	MonitoringInfoUrns_ELEMENT_COUNT           MonitoringInfoUrns_Enum = 1
	MonitoringInfoUrns_START_BUNDLE_MSECS      MonitoringInfoUrns_Enum = 2
	MonitoringInfoUrns_PROCESS_BUNDLE_MSECS    MonitoringInfoUrns_Enum = 3
	MonitoringInfoUrns_FINISH_BUNDLE_MSECS     MonitoringInfoUrns_Enum = 4
	MonitoringInfoUrns_TOTAL_MSECS             MonitoringInfoUrns_Enum = 5
)

var MonitoringInfoUrns_Enum_name = map[int32]string{
	0: "USER_COUNTER_URN_PREFIX",
	1: "ELEMENT_COUNT",
	2: "START_BUNDLE_MSECS",
	3: "PROCESS_BUNDLE_MSECS",
	4: "FINISH_BUNDLE_MSECS",
	5: "TOTAL_MSECS",
}

var MonitoringInfoUrns_Enum_value = map[string]int32{
	"USER_COUNTER_URN_PREFIX": 0,
	"ELEMENT_COUNT":           1,
	"START_BUNDLE_MSECS":      2,
	"PROCESS_BUNDLE_MSECS":    3,
	"FINISH_BUNDLE_MSECS":     4,
	"TOTAL_MSECS":             5,
}

func (x MonitoringInfoUrns_Enum) String() string {
	return proto.EnumName(MonitoringInfoUrns_Enum_name, int32(x))
}

func (MonitoringInfoUrns_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{17, 0}
}

type MonitoringInfoTypeUrns_Enum int32

const (
	MonitoringInfoTypeUrns_SUM_INT64_TYPE          MonitoringInfoTypeUrns_Enum = 0
	MonitoringInfoTypeUrns_DISTRIBUTION_INT64_TYPE MonitoringInfoTypeUrns_Enum = 1
	MonitoringInfoTypeUrns_LATEST_INT64_TYPE       MonitoringInfoTypeUrns_Enum = 2
)

var MonitoringInfoTypeUrns_Enum_name = map[int32]string{
	0: "SUM_INT64_TYPE",
	1: "DISTRIBUTION_INT64_TYPE",
	2: "LATEST_INT64_TYPE",
}

var MonitoringInfoTypeUrns_Enum_value = map[string]int32{
	"SUM_INT64_TYPE":          0,
	"DISTRIBUTION_INT64_TYPE": 1,
	"LATEST_INT64_TYPE":       2,
}

func (x MonitoringInfoTypeUrns_Enum) String() string {
	return proto.EnumName(MonitoringInfoTypeUrns_Enum_name, int32(x))
}

func (MonitoringInfoTypeUrns_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{18, 0}
}

type LogEntry_Severity_Enum int32

const (
	// Unspecified level information. Will be logged at the TRACE level.
	LogEntry_Severity_UNSPECIFIED LogEntry_Severity_Enum = 0
	LogEntry_Severity_TRACE       LogEntry_Severity_Enum = 1
	// Debugging information.
	LogEntry_Severity_DEBUG LogEntry_Severity_Enum = 2
	// Normal events.
	LogEntry_Severity_INFO LogEntry_Severity_Enum = 3
	// Normal but significant events, such as start up, shut down, or
	// configuration.
	LogEntry_Severity_NOTICE LogEntry_Severity_Enum = 4
	// Warning events might cause problems.
	LogEntry_Severity_WARN LogEntry_Severity_Enum = 5
	// Error events are likely to cause problems.
	LogEntry_Severity_ERROR LogEntry_Severity_Enum = 6
	// Critical events cause severe problems or brief outages and may
	// indicate that a person must take action.
	LogEntry_Severity_CRITICAL LogEntry_Severity_Enum = 7
)

var LogEntry_Severity_Enum_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "TRACE",
	2: "DEBUG",
	3: "INFO",
	4: "NOTICE",
	5: "WARN",
	6: "ERROR",
	7: "CRITICAL",
}

var LogEntry_Severity_Enum_value = map[string]int32{
	"UNSPECIFIED": 0,
	"TRACE":       1,
	"DEBUG":       2,
	"INFO":        3,
	"NOTICE":      4,
	"WARN":        5,
	"ERROR":       6,
	"CRITICAL":    7,
}

func (x LogEntry_Severity_Enum) String() string {
	return proto.EnumName(LogEntry_Severity_Enum_name, int32(x))
}

func (LogEntry_Severity_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{44, 1, 0}
}

// A representation of an input or output definition on a primitive transform.
// Stable
type Target struct {
	// (Required) The id of the PrimitiveTransform which is the target.
	PrimitiveTransformReference string `protobuf:"bytes,1,opt,name=primitive_transform_reference,json=primitiveTransformReference,proto3" json:"primitive_transform_reference,omitempty"`
	// (Required) The local name of an input or output defined on the primitive
	// transform.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{0}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetPrimitiveTransformReference() string {
	if m != nil {
		return m.PrimitiveTransformReference
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A repeated list of target definitions.
type Target_List struct {
	Target               []*Target `protobuf:"bytes,1,rep,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Target_List) Reset()         { *m = Target_List{} }
func (m *Target_List) String() string { return proto.CompactTextString(m) }
func (*Target_List) ProtoMessage()    {}
func (*Target_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{0, 0}
}

func (m *Target_List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target_List.Unmarshal(m, b)
}
func (m *Target_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target_List.Marshal(b, m, deterministic)
}
func (m *Target_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target_List.Merge(m, src)
}
func (m *Target_List) XXX_Size() int {
	return xxx_messageInfo_Target_List.Size(m)
}
func (m *Target_List) XXX_DiscardUnknown() {
	xxx_messageInfo_Target_List.DiscardUnknown(m)
}

var xxx_messageInfo_Target_List proto.InternalMessageInfo

func (m *Target_List) GetTarget() []*Target {
	if m != nil {
		return m.Target
	}
	return nil
}

// A descriptor for connecting to a remote port using the Beam Fn Data API.
// Allows for communication between two environments (for example between the
// runner and the SDK).
// Stable
type RemoteGrpcPort struct {
	// (Required) An API descriptor which describes where to
	// connect to including any authentication that is required.
	ApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,1,opt,name=api_service_descriptor,json=apiServiceDescriptor,proto3" json:"api_service_descriptor,omitempty"`
	// (Required) The ID of the Coder that will be used to encode and decode data
	// sent over this port.
	CoderId              string   `protobuf:"bytes,2,opt,name=coder_id,json=coderId,proto3" json:"coder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteGrpcPort) Reset()         { *m = RemoteGrpcPort{} }
func (m *RemoteGrpcPort) String() string { return proto.CompactTextString(m) }
func (*RemoteGrpcPort) ProtoMessage()    {}
func (*RemoteGrpcPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{1}
}

func (m *RemoteGrpcPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteGrpcPort.Unmarshal(m, b)
}
func (m *RemoteGrpcPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteGrpcPort.Marshal(b, m, deterministic)
}
func (m *RemoteGrpcPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteGrpcPort.Merge(m, src)
}
func (m *RemoteGrpcPort) XXX_Size() int {
	return xxx_messageInfo_RemoteGrpcPort.Size(m)
}
func (m *RemoteGrpcPort) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteGrpcPort.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteGrpcPort proto.InternalMessageInfo

func (m *RemoteGrpcPort) GetApiServiceDescriptor() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.ApiServiceDescriptor
	}
	return nil
}

func (m *RemoteGrpcPort) GetCoderId() string {
	if m != nil {
		return m.CoderId
	}
	return ""
}

// A request sent by a runner which the SDK is asked to fulfill.
// For any unsupported request type, an error should be returned with a
// matching instruction id.
// Stable
type InstructionRequest struct {
	// (Required) An unique identifier provided by the runner which represents
	// this requests execution. The InstructionResponse MUST have the matching id.
	InstructionId string `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	// (Required) A request that the SDK Harness needs to interpret.
	//
	// Types that are valid to be assigned to Request:
	//	*InstructionRequest_Register
	//	*InstructionRequest_ProcessBundle
	//	*InstructionRequest_ProcessBundleProgress
	//	*InstructionRequest_ProcessBundleSplit
	//	*InstructionRequest_FinalizeBundle
	Request              isInstructionRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *InstructionRequest) Reset()         { *m = InstructionRequest{} }
func (m *InstructionRequest) String() string { return proto.CompactTextString(m) }
func (*InstructionRequest) ProtoMessage()    {}
func (*InstructionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{2}
}

func (m *InstructionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstructionRequest.Unmarshal(m, b)
}
func (m *InstructionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstructionRequest.Marshal(b, m, deterministic)
}
func (m *InstructionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstructionRequest.Merge(m, src)
}
func (m *InstructionRequest) XXX_Size() int {
	return xxx_messageInfo_InstructionRequest.Size(m)
}
func (m *InstructionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstructionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstructionRequest proto.InternalMessageInfo

func (m *InstructionRequest) GetInstructionId() string {
	if m != nil {
		return m.InstructionId
	}
	return ""
}

type isInstructionRequest_Request interface {
	isInstructionRequest_Request()
}

type InstructionRequest_Register struct {
	Register *RegisterRequest `protobuf:"bytes,1000,opt,name=register,proto3,oneof"`
}

type InstructionRequest_ProcessBundle struct {
	ProcessBundle *ProcessBundleRequest `protobuf:"bytes,1001,opt,name=process_bundle,json=processBundle,proto3,oneof"`
}

type InstructionRequest_ProcessBundleProgress struct {
	ProcessBundleProgress *ProcessBundleProgressRequest `protobuf:"bytes,1002,opt,name=process_bundle_progress,json=processBundleProgress,proto3,oneof"`
}

type InstructionRequest_ProcessBundleSplit struct {
	ProcessBundleSplit *ProcessBundleSplitRequest `protobuf:"bytes,1003,opt,name=process_bundle_split,json=processBundleSplit,proto3,oneof"`
}

type InstructionRequest_FinalizeBundle struct {
	FinalizeBundle *FinalizeBundleRequest `protobuf:"bytes,1004,opt,name=finalize_bundle,json=finalizeBundle,proto3,oneof"`
}

func (*InstructionRequest_Register) isInstructionRequest_Request() {}

func (*InstructionRequest_ProcessBundle) isInstructionRequest_Request() {}

func (*InstructionRequest_ProcessBundleProgress) isInstructionRequest_Request() {}

func (*InstructionRequest_ProcessBundleSplit) isInstructionRequest_Request() {}

func (*InstructionRequest_FinalizeBundle) isInstructionRequest_Request() {}

func (m *InstructionRequest) GetRequest() isInstructionRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *InstructionRequest) GetRegister() *RegisterRequest {
	if x, ok := m.GetRequest().(*InstructionRequest_Register); ok {
		return x.Register
	}
	return nil
}

func (m *InstructionRequest) GetProcessBundle() *ProcessBundleRequest {
	if x, ok := m.GetRequest().(*InstructionRequest_ProcessBundle); ok {
		return x.ProcessBundle
	}
	return nil
}

func (m *InstructionRequest) GetProcessBundleProgress() *ProcessBundleProgressRequest {
	if x, ok := m.GetRequest().(*InstructionRequest_ProcessBundleProgress); ok {
		return x.ProcessBundleProgress
	}
	return nil
}

func (m *InstructionRequest) GetProcessBundleSplit() *ProcessBundleSplitRequest {
	if x, ok := m.GetRequest().(*InstructionRequest_ProcessBundleSplit); ok {
		return x.ProcessBundleSplit
	}
	return nil
}

func (m *InstructionRequest) GetFinalizeBundle() *FinalizeBundleRequest {
	if x, ok := m.GetRequest().(*InstructionRequest_FinalizeBundle); ok {
		return x.FinalizeBundle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstructionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstructionRequest_Register)(nil),
		(*InstructionRequest_ProcessBundle)(nil),
		(*InstructionRequest_ProcessBundleProgress)(nil),
		(*InstructionRequest_ProcessBundleSplit)(nil),
		(*InstructionRequest_FinalizeBundle)(nil),
	}
}

// The response for an associated request the SDK had been asked to fulfill.
// Stable
type InstructionResponse struct {
	// (Required) A reference provided by the runner which represents a requests
	// execution. The InstructionResponse MUST have the matching id when
	// responding to the runner.
	InstructionId string `protobuf:"bytes,1,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	// If this is specified, then this instruction has failed.
	// A human readable string representing the reason as to why processing has
	// failed.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// If the instruction did not fail, it is required to return an equivalent
	// response type depending on the request this matches.
	//
	// Types that are valid to be assigned to Response:
	//	*InstructionResponse_Register
	//	*InstructionResponse_ProcessBundle
	//	*InstructionResponse_ProcessBundleProgress
	//	*InstructionResponse_ProcessBundleSplit
	//	*InstructionResponse_FinalizeBundle
	Response             isInstructionResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *InstructionResponse) Reset()         { *m = InstructionResponse{} }
func (m *InstructionResponse) String() string { return proto.CompactTextString(m) }
func (*InstructionResponse) ProtoMessage()    {}
func (*InstructionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{3}
}

func (m *InstructionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstructionResponse.Unmarshal(m, b)
}
func (m *InstructionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstructionResponse.Marshal(b, m, deterministic)
}
func (m *InstructionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstructionResponse.Merge(m, src)
}
func (m *InstructionResponse) XXX_Size() int {
	return xxx_messageInfo_InstructionResponse.Size(m)
}
func (m *InstructionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstructionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstructionResponse proto.InternalMessageInfo

func (m *InstructionResponse) GetInstructionId() string {
	if m != nil {
		return m.InstructionId
	}
	return ""
}

func (m *InstructionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type isInstructionResponse_Response interface {
	isInstructionResponse_Response()
}

type InstructionResponse_Register struct {
	Register *RegisterResponse `protobuf:"bytes,1000,opt,name=register,proto3,oneof"`
}

type InstructionResponse_ProcessBundle struct {
	ProcessBundle *ProcessBundleResponse `protobuf:"bytes,1001,opt,name=process_bundle,json=processBundle,proto3,oneof"`
}

type InstructionResponse_ProcessBundleProgress struct {
	ProcessBundleProgress *ProcessBundleProgressResponse `protobuf:"bytes,1002,opt,name=process_bundle_progress,json=processBundleProgress,proto3,oneof"`
}

type InstructionResponse_ProcessBundleSplit struct {
	ProcessBundleSplit *ProcessBundleSplitResponse `protobuf:"bytes,1003,opt,name=process_bundle_split,json=processBundleSplit,proto3,oneof"`
}

type InstructionResponse_FinalizeBundle struct {
	FinalizeBundle *FinalizeBundleResponse `protobuf:"bytes,1004,opt,name=finalize_bundle,json=finalizeBundle,proto3,oneof"`
}

func (*InstructionResponse_Register) isInstructionResponse_Response() {}

func (*InstructionResponse_ProcessBundle) isInstructionResponse_Response() {}

func (*InstructionResponse_ProcessBundleProgress) isInstructionResponse_Response() {}

func (*InstructionResponse_ProcessBundleSplit) isInstructionResponse_Response() {}

func (*InstructionResponse_FinalizeBundle) isInstructionResponse_Response() {}

func (m *InstructionResponse) GetResponse() isInstructionResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *InstructionResponse) GetRegister() *RegisterResponse {
	if x, ok := m.GetResponse().(*InstructionResponse_Register); ok {
		return x.Register
	}
	return nil
}

func (m *InstructionResponse) GetProcessBundle() *ProcessBundleResponse {
	if x, ok := m.GetResponse().(*InstructionResponse_ProcessBundle); ok {
		return x.ProcessBundle
	}
	return nil
}

func (m *InstructionResponse) GetProcessBundleProgress() *ProcessBundleProgressResponse {
	if x, ok := m.GetResponse().(*InstructionResponse_ProcessBundleProgress); ok {
		return x.ProcessBundleProgress
	}
	return nil
}

func (m *InstructionResponse) GetProcessBundleSplit() *ProcessBundleSplitResponse {
	if x, ok := m.GetResponse().(*InstructionResponse_ProcessBundleSplit); ok {
		return x.ProcessBundleSplit
	}
	return nil
}

func (m *InstructionResponse) GetFinalizeBundle() *FinalizeBundleResponse {
	if x, ok := m.GetResponse().(*InstructionResponse_FinalizeBundle); ok {
		return x.FinalizeBundle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstructionResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstructionResponse_Register)(nil),
		(*InstructionResponse_ProcessBundle)(nil),
		(*InstructionResponse_ProcessBundleProgress)(nil),
		(*InstructionResponse_ProcessBundleSplit)(nil),
		(*InstructionResponse_FinalizeBundle)(nil),
	}
}

// A list of objects which can be referred to by the runner in
// future requests.
// Stable
type RegisterRequest struct {
	// (Optional) The set of descriptors used to process bundles.
	ProcessBundleDescriptor []*ProcessBundleDescriptor `protobuf:"bytes,1,rep,name=process_bundle_descriptor,json=processBundleDescriptor,proto3" json:"process_bundle_descriptor,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                   `json:"-"`
	XXX_unrecognized        []byte                     `json:"-"`
	XXX_sizecache           int32                      `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{4}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetProcessBundleDescriptor() []*ProcessBundleDescriptor {
	if m != nil {
		return m.ProcessBundleDescriptor
	}
	return nil
}

// Stable
type RegisterResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{5}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

// Definitions that should be used to construct the bundle processing graph.
type ProcessBundleDescriptor struct {
	// (Required) A pipeline level unique id which can be used as a reference to
	// refer to this.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Required) A map from pipeline-scoped id to PTransform.
	Transforms map[string]*pipeline_v1.PTransform `protobuf:"bytes,2,rep,name=transforms,proto3" json:"transforms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) A map from pipeline-scoped id to PCollection.
	Pcollections map[string]*pipeline_v1.PCollection `protobuf:"bytes,3,rep,name=pcollections,proto3" json:"pcollections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) A map from pipeline-scoped id to WindowingStrategy.
	WindowingStrategies map[string]*pipeline_v1.WindowingStrategy `protobuf:"bytes,4,rep,name=windowing_strategies,json=windowingStrategies,proto3" json:"windowing_strategies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) A map from pipeline-scoped id to Coder.
	Coders map[string]*pipeline_v1.Coder `protobuf:"bytes,5,rep,name=coders,proto3" json:"coders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) A map from pipeline-scoped id to Environment.
	Environments map[string]*pipeline_v1.Environment `protobuf:"bytes,6,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A descriptor describing the end point to use for State API
	// calls. Required if the Runner intends to send remote references over the
	// data plane or if any of the transforms rely on user state or side inputs.
	StateApiServiceDescriptor *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,7,opt,name=state_api_service_descriptor,json=stateApiServiceDescriptor,proto3" json:"state_api_service_descriptor,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                          `json:"-"`
	XXX_unrecognized          []byte                            `json:"-"`
	XXX_sizecache             int32                             `json:"-"`
}

func (m *ProcessBundleDescriptor) Reset()         { *m = ProcessBundleDescriptor{} }
func (m *ProcessBundleDescriptor) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleDescriptor) ProtoMessage()    {}
func (*ProcessBundleDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{6}
}

func (m *ProcessBundleDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleDescriptor.Unmarshal(m, b)
}
func (m *ProcessBundleDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleDescriptor.Marshal(b, m, deterministic)
}
func (m *ProcessBundleDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleDescriptor.Merge(m, src)
}
func (m *ProcessBundleDescriptor) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleDescriptor.Size(m)
}
func (m *ProcessBundleDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleDescriptor proto.InternalMessageInfo

func (m *ProcessBundleDescriptor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessBundleDescriptor) GetTransforms() map[string]*pipeline_v1.PTransform {
	if m != nil {
		return m.Transforms
	}
	return nil
}

func (m *ProcessBundleDescriptor) GetPcollections() map[string]*pipeline_v1.PCollection {
	if m != nil {
		return m.Pcollections
	}
	return nil
}

func (m *ProcessBundleDescriptor) GetWindowingStrategies() map[string]*pipeline_v1.WindowingStrategy {
	if m != nil {
		return m.WindowingStrategies
	}
	return nil
}

func (m *ProcessBundleDescriptor) GetCoders() map[string]*pipeline_v1.Coder {
	if m != nil {
		return m.Coders
	}
	return nil
}

func (m *ProcessBundleDescriptor) GetEnvironments() map[string]*pipeline_v1.Environment {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (m *ProcessBundleDescriptor) GetStateApiServiceDescriptor() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.StateApiServiceDescriptor
	}
	return nil
}

// One of the applications specifying the scope of work for a bundle.
// See
// https://docs.google.com/document/d/1tUDb45sStdR8u7-jBkGdw3OGFK7aa2-V7eo86zYSE_4/edit#heading=h.9g3g5weg2u9
// for further details.
type BundleApplication struct {
	// (Required) The primitive transform to which to pass the element
	PtransformId string `protobuf:"bytes,1,opt,name=ptransform_id,json=ptransformId,proto3" json:"ptransform_id,omitempty"`
	// (Required) Name of the transform's input to which to pass the element.
	InputId string `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	// (Required) The encoded element to pass to the transform.
	Element []byte `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
	// The map is keyed by the local output name of the PTransform. Each
	// value represents a lower bound on the timestamps of elements that
	// are produced by this PTransform into each of its output PCollections
	// when invoked with this application.
	OutputWatermarks map[string]*timestamp.Timestamp `protobuf:"bytes,4,rep,name=output_watermarks,json=outputWatermarks,proto3" json:"output_watermarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) An estimate for the amount outstanding work related to
	// this application.
	Backlog *BundleApplication_Backlog `protobuf:"bytes,5,opt,name=backlog,proto3" json:"backlog,omitempty"`
	// (Required) Whether this application potentially produces an unbounded
	// amount of data. Note that this should only be set to BOUNDED if and
	// only if the application is known to produce a finite amount of output.
	//
	// Note that this is different from the backlog as the backlog represents
	// how much work there is currently outstanding.
	IsBounded pipeline_v1.IsBounded_Enum `protobuf:"varint,6,opt,name=is_bounded,json=isBounded,proto3,enum=org.apache.beam.model.pipeline.v1.IsBounded_Enum" json:"is_bounded,omitempty"`
	// Contains additional monitoring information related to this application.
	//
	// Each application is able to report information that some runners
	// will use consume when providing a UI or for making scaling and performance
	// decisions. See https://s.apache.org/beam-bundles-backlog-splitting for
	// details about what types of signals may be useful to report.
	MonitoringInfos      []*MonitoringInfo `protobuf:"bytes,7,rep,name=monitoring_infos,json=monitoringInfos,proto3" json:"monitoring_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BundleApplication) Reset()         { *m = BundleApplication{} }
func (m *BundleApplication) String() string { return proto.CompactTextString(m) }
func (*BundleApplication) ProtoMessage()    {}
func (*BundleApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{7}
}

func (m *BundleApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleApplication.Unmarshal(m, b)
}
func (m *BundleApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleApplication.Marshal(b, m, deterministic)
}
func (m *BundleApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleApplication.Merge(m, src)
}
func (m *BundleApplication) XXX_Size() int {
	return xxx_messageInfo_BundleApplication.Size(m)
}
func (m *BundleApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleApplication.DiscardUnknown(m)
}

var xxx_messageInfo_BundleApplication proto.InternalMessageInfo

func (m *BundleApplication) GetPtransformId() string {
	if m != nil {
		return m.PtransformId
	}
	return ""
}

func (m *BundleApplication) GetInputId() string {
	if m != nil {
		return m.InputId
	}
	return ""
}

func (m *BundleApplication) GetElement() []byte {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *BundleApplication) GetOutputWatermarks() map[string]*timestamp.Timestamp {
	if m != nil {
		return m.OutputWatermarks
	}
	return nil
}

func (m *BundleApplication) GetBacklog() *BundleApplication_Backlog {
	if m != nil {
		return m.Backlog
	}
	return nil
}

func (m *BundleApplication) GetIsBounded() pipeline_v1.IsBounded_Enum {
	if m != nil {
		return m.IsBounded
	}
	return pipeline_v1.IsBounded_UNSPECIFIED
}

func (m *BundleApplication) GetMonitoringInfos() []*MonitoringInfo {
	if m != nil {
		return m.MonitoringInfos
	}
	return nil
}

// Represents an estimate for the amount of currently outstanding work.
type BundleApplication_Backlog struct {
	// This informs Runners on how to aggregate the backlog
	// being reported across multiple active bundles. Backlogs
	// are aggregated using the set of partitions.
	//
	// For example SplittableDoFn's which consume elements from:
	//  * a globally shared resource such as a Pubsub queue should set this
	//    to “”.
	//  * a shared partitioned resource should use the partition identifier.
	//  * a uniquely partitioned resource such as a file range should set this
	//  to
	//    file name + start offset.
	Partition []byte `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// The estimate for the backlog.
	//
	// Types that are valid to be assigned to Value:
	//	*BundleApplication_Backlog_Bytes
	//	*BundleApplication_Backlog_IsUnknown
	Value                isBundleApplication_Backlog_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *BundleApplication_Backlog) Reset()         { *m = BundleApplication_Backlog{} }
func (m *BundleApplication_Backlog) String() string { return proto.CompactTextString(m) }
func (*BundleApplication_Backlog) ProtoMessage()    {}
func (*BundleApplication_Backlog) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{7, 1}
}

func (m *BundleApplication_Backlog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleApplication_Backlog.Unmarshal(m, b)
}
func (m *BundleApplication_Backlog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleApplication_Backlog.Marshal(b, m, deterministic)
}
func (m *BundleApplication_Backlog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleApplication_Backlog.Merge(m, src)
}
func (m *BundleApplication_Backlog) XXX_Size() int {
	return xxx_messageInfo_BundleApplication_Backlog.Size(m)
}
func (m *BundleApplication_Backlog) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleApplication_Backlog.DiscardUnknown(m)
}

var xxx_messageInfo_BundleApplication_Backlog proto.InternalMessageInfo

func (m *BundleApplication_Backlog) GetPartition() []byte {
	if m != nil {
		return m.Partition
	}
	return nil
}

type isBundleApplication_Backlog_Value interface {
	isBundleApplication_Backlog_Value()
}

type BundleApplication_Backlog_Bytes struct {
	Bytes []byte `protobuf:"bytes,1000,opt,name=bytes,proto3,oneof"`
}

type BundleApplication_Backlog_IsUnknown struct {
	IsUnknown bool `protobuf:"varint,1001,opt,name=is_unknown,json=isUnknown,proto3,oneof"`
}

func (*BundleApplication_Backlog_Bytes) isBundleApplication_Backlog_Value() {}

func (*BundleApplication_Backlog_IsUnknown) isBundleApplication_Backlog_Value() {}

func (m *BundleApplication_Backlog) GetValue() isBundleApplication_Backlog_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BundleApplication_Backlog) GetBytes() []byte {
	if x, ok := m.GetValue().(*BundleApplication_Backlog_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *BundleApplication_Backlog) GetIsUnknown() bool {
	if x, ok := m.GetValue().(*BundleApplication_Backlog_IsUnknown); ok {
		return x.IsUnknown
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BundleApplication_Backlog) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BundleApplication_Backlog_Bytes)(nil),
		(*BundleApplication_Backlog_IsUnknown)(nil),
	}
}

// An Application should be scheduled for execution after a delay.
type DelayedBundleApplication struct {
	// Recommended time at which the application should be scheduled to execute
	// by the runner. Times in the past may be scheduled to execute immediately.
	RequestedExecutionTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=requested_execution_time,json=requestedExecutionTime,proto3" json:"requested_execution_time,omitempty"`
	// (Required) The application that should be scheduled.
	Application          *BundleApplication `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DelayedBundleApplication) Reset()         { *m = DelayedBundleApplication{} }
func (m *DelayedBundleApplication) String() string { return proto.CompactTextString(m) }
func (*DelayedBundleApplication) ProtoMessage()    {}
func (*DelayedBundleApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{8}
}

func (m *DelayedBundleApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayedBundleApplication.Unmarshal(m, b)
}
func (m *DelayedBundleApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayedBundleApplication.Marshal(b, m, deterministic)
}
func (m *DelayedBundleApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayedBundleApplication.Merge(m, src)
}
func (m *DelayedBundleApplication) XXX_Size() int {
	return xxx_messageInfo_DelayedBundleApplication.Size(m)
}
func (m *DelayedBundleApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayedBundleApplication.DiscardUnknown(m)
}

var xxx_messageInfo_DelayedBundleApplication proto.InternalMessageInfo

func (m *DelayedBundleApplication) GetRequestedExecutionTime() *timestamp.Timestamp {
	if m != nil {
		return m.RequestedExecutionTime
	}
	return nil
}

func (m *DelayedBundleApplication) GetApplication() *BundleApplication {
	if m != nil {
		return m.Application
	}
	return nil
}

// A request to process a given bundle.
// Stable
type ProcessBundleRequest struct {
	// (Required) A reference to the process bundle descriptor that must be
	// instantiated and executed by the SDK harness.
	ProcessBundleDescriptorReference string `protobuf:"bytes,1,opt,name=process_bundle_descriptor_reference,json=processBundleDescriptorReference,proto3" json:"process_bundle_descriptor_reference,omitempty"`
	// (Optional) A list of cache tokens that can be used by an SDK to reuse
	// cached data returned by the State API across multiple bundles.
	CacheTokens          [][]byte `protobuf:"bytes,2,rep,name=cache_tokens,json=cacheTokens,proto3" json:"cache_tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessBundleRequest) Reset()         { *m = ProcessBundleRequest{} }
func (m *ProcessBundleRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleRequest) ProtoMessage()    {}
func (*ProcessBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{9}
}

func (m *ProcessBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleRequest.Unmarshal(m, b)
}
func (m *ProcessBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleRequest.Marshal(b, m, deterministic)
}
func (m *ProcessBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleRequest.Merge(m, src)
}
func (m *ProcessBundleRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleRequest.Size(m)
}
func (m *ProcessBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleRequest proto.InternalMessageInfo

func (m *ProcessBundleRequest) GetProcessBundleDescriptorReference() string {
	if m != nil {
		return m.ProcessBundleDescriptorReference
	}
	return ""
}

func (m *ProcessBundleRequest) GetCacheTokens() [][]byte {
	if m != nil {
		return m.CacheTokens
	}
	return nil
}

type ProcessBundleResponse struct {
	// (Optional) If metrics reporting is supported by the SDK, this represents
	// the final metrics to record for this bundle.
	// DEPRECATED
	Metrics *Metrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// (Optional) Specifies that the bundle has not been completed and the
	// following applications need to be scheduled and executed in the future.
	// A runner that does not yet support residual roots MUST still check that
	// this is empty for correctness.
	ResidualRoots []*DelayedBundleApplication `protobuf:"bytes,2,rep,name=residual_roots,json=residualRoots,proto3" json:"residual_roots,omitempty"`
	// (Required) The list of metrics or other MonitoredState
	// collected while processing this bundle.
	MonitoringInfos []*MonitoringInfo `protobuf:"bytes,3,rep,name=monitoring_infos,json=monitoringInfos,proto3" json:"monitoring_infos,omitempty"`
	// (Optional) Specifies that the runner must callback to this worker
	// once the output of the bundle is committed. The Runner must send a
	// FinalizeBundleRequest with the instruction id of the ProcessBundleRequest
	// that is related to this ProcessBundleResponse.
	RequiresFinalization bool     `protobuf:"varint,4,opt,name=requires_finalization,json=requiresFinalization,proto3" json:"requires_finalization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessBundleResponse) Reset()         { *m = ProcessBundleResponse{} }
func (m *ProcessBundleResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleResponse) ProtoMessage()    {}
func (*ProcessBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{10}
}

func (m *ProcessBundleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleResponse.Unmarshal(m, b)
}
func (m *ProcessBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleResponse.Marshal(b, m, deterministic)
}
func (m *ProcessBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleResponse.Merge(m, src)
}
func (m *ProcessBundleResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleResponse.Size(m)
}
func (m *ProcessBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleResponse proto.InternalMessageInfo

func (m *ProcessBundleResponse) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ProcessBundleResponse) GetResidualRoots() []*DelayedBundleApplication {
	if m != nil {
		return m.ResidualRoots
	}
	return nil
}

func (m *ProcessBundleResponse) GetMonitoringInfos() []*MonitoringInfo {
	if m != nil {
		return m.MonitoringInfos
	}
	return nil
}

func (m *ProcessBundleResponse) GetRequiresFinalization() bool {
	if m != nil {
		return m.RequiresFinalization
	}
	return false
}

// A request to report progress information for a given bundle.
// This is an optional request to be handled and is used to support advanced
// SDK features such as SplittableDoFn, user level metrics etc.
type ProcessBundleProgressRequest struct {
	// (Required) A reference to an active process bundle request with the given
	// instruction id.
	InstructionReference string   `protobuf:"bytes,1,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessBundleProgressRequest) Reset()         { *m = ProcessBundleProgressRequest{} }
func (m *ProcessBundleProgressRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleProgressRequest) ProtoMessage()    {}
func (*ProcessBundleProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{11}
}

func (m *ProcessBundleProgressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleProgressRequest.Unmarshal(m, b)
}
func (m *ProcessBundleProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleProgressRequest.Marshal(b, m, deterministic)
}
func (m *ProcessBundleProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleProgressRequest.Merge(m, src)
}
func (m *ProcessBundleProgressRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleProgressRequest.Size(m)
}
func (m *ProcessBundleProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleProgressRequest proto.InternalMessageInfo

func (m *ProcessBundleProgressRequest) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

// A specification containing required set of fields and labels required
// to be set on a MonitoringInfo for the specific URN for SDK->RunnerHarness
// ProcessBundleResponse reporting.
type MonitoringInfoSpec struct {
	Urn     string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	TypeUrn string `protobuf:"bytes,2,opt,name=type_urn,json=typeUrn,proto3" json:"type_urn,omitempty"`
	// The list of required
	RequiredLabels []string `protobuf:"bytes,3,rep,name=required_labels,json=requiredLabels,proto3" json:"required_labels,omitempty"`
	// Extra non functional parts of the spec for descriptive purposes.
	// i.e. description, units, etc.
	Annotations          []*Annotation `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MonitoringInfoSpec) Reset()         { *m = MonitoringInfoSpec{} }
func (m *MonitoringInfoSpec) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoSpec) ProtoMessage()    {}
func (*MonitoringInfoSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{12}
}

func (m *MonitoringInfoSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoSpec.Unmarshal(m, b)
}
func (m *MonitoringInfoSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoSpec.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoSpec.Merge(m, src)
}
func (m *MonitoringInfoSpec) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoSpec.Size(m)
}
func (m *MonitoringInfoSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoSpec proto.InternalMessageInfo

func (m *MonitoringInfoSpec) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *MonitoringInfoSpec) GetTypeUrn() string {
	if m != nil {
		return m.TypeUrn
	}
	return ""
}

func (m *MonitoringInfoSpec) GetRequiredLabels() []string {
	if m != nil {
		return m.RequiredLabels
	}
	return nil
}

func (m *MonitoringInfoSpec) GetAnnotations() []*Annotation {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// The key name and value string of MonitoringInfo annotations.
type Annotation struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Annotation) Reset()         { *m = Annotation{} }
func (m *Annotation) String() string { return proto.CompactTextString(m) }
func (*Annotation) ProtoMessage()    {}
func (*Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{13}
}

func (m *Annotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotation.Unmarshal(m, b)
}
func (m *Annotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotation.Marshal(b, m, deterministic)
}
func (m *Annotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotation.Merge(m, src)
}
func (m *Annotation) XXX_Size() int {
	return xxx_messageInfo_Annotation.Size(m)
}
func (m *Annotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotation.DiscardUnknown(m)
}

var xxx_messageInfo_Annotation proto.InternalMessageInfo

func (m *Annotation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Annotation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Populated MonitoringInfoSpecs for specific URNs.
// Indicating the required fields to be set.
// SDKs and RunnerHarnesses can load these instances into memory and write a
// validator or code generator to assist with populating and validating
// MonitoringInfo protos.
type MonitoringInfoSpecs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoSpecs) Reset()         { *m = MonitoringInfoSpecs{} }
func (m *MonitoringInfoSpecs) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoSpecs) ProtoMessage()    {}
func (*MonitoringInfoSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{14}
}

func (m *MonitoringInfoSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoSpecs.Unmarshal(m, b)
}
func (m *MonitoringInfoSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoSpecs.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoSpecs.Merge(m, src)
}
func (m *MonitoringInfoSpecs) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoSpecs.Size(m)
}
func (m *MonitoringInfoSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoSpecs proto.InternalMessageInfo

// A set of properties for the MonitoringInfoLabel, this is useful to obtain
// the proper label string for the MonitoringInfoLabel.
type MonitoringInfoLabelProps struct {
	// The label key to use in the MonitoringInfo labels map.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoLabelProps) Reset()         { *m = MonitoringInfoLabelProps{} }
func (m *MonitoringInfoLabelProps) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoLabelProps) ProtoMessage()    {}
func (*MonitoringInfoLabelProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{15}
}

func (m *MonitoringInfoLabelProps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoLabelProps.Unmarshal(m, b)
}
func (m *MonitoringInfoLabelProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoLabelProps.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoLabelProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoLabelProps.Merge(m, src)
}
func (m *MonitoringInfoLabelProps) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoLabelProps.Size(m)
}
func (m *MonitoringInfoLabelProps) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoLabelProps.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoLabelProps proto.InternalMessageInfo

func (m *MonitoringInfoLabelProps) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MonitoringInfo struct {
	// The name defining the metric or monitored state.
	Urn string `protobuf:"bytes,1,opt,name=urn,proto3" json:"urn,omitempty"`
	// This is specified as a URN that implies:
	// A message class: (Distribution, Counter, Extrema, MonitoringDataTable).
	// Sub types like field formats - int64, double, string.
	// Aggregation methods - SUM, LATEST, TOP-N, BOTTOM-N, DISTRIBUTION
	// valid values are:
	// beam:metrics:[sum_int_64|latest_int_64|top_n_int_64|bottom_n_int_64|
	//     sum_double|latest_double|top_n_double|bottom_n_double|
	//     distribution_int_64|distribution_double|monitoring_data_table
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The Metric or monitored state.
	//
	// Types that are valid to be assigned to Data:
	//	*MonitoringInfo_MonitoringTableData
	//	*MonitoringInfo_Metric
	Data isMonitoringInfo_Data `protobuf_oneof:"data"`
	// A set of key+value labels which define the scope of the metric.
	// Either a well defined entity id for matching the enum names in
	// the MonitoringInfoLabels enum or any arbitrary label
	// set by a custom metric or user metric.
	// A monitoring system is expected to be able to aggregate the metrics
	// together for all updates having the same URN and labels. Some systems such
	// as Stackdriver will be able to aggregate the metrics using a subset of the
	// provided labels
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The walltime of the most recent update.
	// Useful for aggregation for latest types such as LatestInt64.
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MonitoringInfo) Reset()         { *m = MonitoringInfo{} }
func (m *MonitoringInfo) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfo) ProtoMessage()    {}
func (*MonitoringInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{16}
}

func (m *MonitoringInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfo.Unmarshal(m, b)
}
func (m *MonitoringInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfo.Marshal(b, m, deterministic)
}
func (m *MonitoringInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfo.Merge(m, src)
}
func (m *MonitoringInfo) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfo.Size(m)
}
func (m *MonitoringInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfo proto.InternalMessageInfo

func (m *MonitoringInfo) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *MonitoringInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type isMonitoringInfo_Data interface {
	isMonitoringInfo_Data()
}

type MonitoringInfo_MonitoringTableData struct {
	MonitoringTableData *MonitoringTableData `protobuf:"bytes,3,opt,name=monitoring_table_data,json=monitoringTableData,proto3,oneof"`
}

type MonitoringInfo_Metric struct {
	Metric *Metric `protobuf:"bytes,4,opt,name=metric,proto3,oneof"`
}

func (*MonitoringInfo_MonitoringTableData) isMonitoringInfo_Data() {}

func (*MonitoringInfo_Metric) isMonitoringInfo_Data() {}

func (m *MonitoringInfo) GetData() isMonitoringInfo_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MonitoringInfo) GetMonitoringTableData() *MonitoringTableData {
	if x, ok := m.GetData().(*MonitoringInfo_MonitoringTableData); ok {
		return x.MonitoringTableData
	}
	return nil
}

func (m *MonitoringInfo) GetMetric() *Metric {
	if x, ok := m.GetData().(*MonitoringInfo_Metric); ok {
		return x.Metric
	}
	return nil
}

func (m *MonitoringInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MonitoringInfo) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MonitoringInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MonitoringInfo_MonitoringTableData)(nil),
		(*MonitoringInfo_Metric)(nil),
	}
}

type MonitoringInfoUrns struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoUrns) Reset()         { *m = MonitoringInfoUrns{} }
func (m *MonitoringInfoUrns) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoUrns) ProtoMessage()    {}
func (*MonitoringInfoUrns) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{17}
}

func (m *MonitoringInfoUrns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoUrns.Unmarshal(m, b)
}
func (m *MonitoringInfoUrns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoUrns.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoUrns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoUrns.Merge(m, src)
}
func (m *MonitoringInfoUrns) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoUrns.Size(m)
}
func (m *MonitoringInfoUrns) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoUrns.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoUrns proto.InternalMessageInfo

type MonitoringInfoTypeUrns struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitoringInfoTypeUrns) Reset()         { *m = MonitoringInfoTypeUrns{} }
func (m *MonitoringInfoTypeUrns) String() string { return proto.CompactTextString(m) }
func (*MonitoringInfoTypeUrns) ProtoMessage()    {}
func (*MonitoringInfoTypeUrns) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{18}
}

func (m *MonitoringInfoTypeUrns) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Unmarshal(m, b)
}
func (m *MonitoringInfoTypeUrns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Marshal(b, m, deterministic)
}
func (m *MonitoringInfoTypeUrns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringInfoTypeUrns.Merge(m, src)
}
func (m *MonitoringInfoTypeUrns) XXX_Size() int {
	return xxx_messageInfo_MonitoringInfoTypeUrns.Size(m)
}
func (m *MonitoringInfoTypeUrns) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringInfoTypeUrns.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringInfoTypeUrns proto.InternalMessageInfo

type Metric struct {
	// (Required) The data for this metric.
	//
	// Types that are valid to be assigned to Data:
	//	*Metric_CounterData
	//	*Metric_DistributionData
	//	*Metric_ExtremaData
	Data                 isMetric_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{19}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

type isMetric_Data interface {
	isMetric_Data()
}

type Metric_CounterData struct {
	CounterData *CounterData `protobuf:"bytes,1,opt,name=counter_data,json=counterData,proto3,oneof"`
}

type Metric_DistributionData struct {
	DistributionData *DistributionData `protobuf:"bytes,2,opt,name=distribution_data,json=distributionData,proto3,oneof"`
}

type Metric_ExtremaData struct {
	ExtremaData *ExtremaData `protobuf:"bytes,3,opt,name=extrema_data,json=extremaData,proto3,oneof"`
}

func (*Metric_CounterData) isMetric_Data() {}

func (*Metric_DistributionData) isMetric_Data() {}

func (*Metric_ExtremaData) isMetric_Data() {}

func (m *Metric) GetData() isMetric_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Metric) GetCounterData() *CounterData {
	if x, ok := m.GetData().(*Metric_CounterData); ok {
		return x.CounterData
	}
	return nil
}

func (m *Metric) GetDistributionData() *DistributionData {
	if x, ok := m.GetData().(*Metric_DistributionData); ok {
		return x.DistributionData
	}
	return nil
}

func (m *Metric) GetExtremaData() *ExtremaData {
	if x, ok := m.GetData().(*Metric_ExtremaData); ok {
		return x.ExtremaData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metric) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metric_CounterData)(nil),
		(*Metric_DistributionData)(nil),
		(*Metric_ExtremaData)(nil),
	}
}

// Data associated with a Counter or Gauge metric.
// This is designed to be compatible with metric collection
// systems such as DropWizard.
type CounterData struct {
	// Types that are valid to be assigned to Value:
	//	*CounterData_Int64Value
	//	*CounterData_DoubleValue
	//	*CounterData_StringValue
	Value                isCounterData_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CounterData) Reset()         { *m = CounterData{} }
func (m *CounterData) String() string { return proto.CompactTextString(m) }
func (*CounterData) ProtoMessage()    {}
func (*CounterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{20}
}

func (m *CounterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CounterData.Unmarshal(m, b)
}
func (m *CounterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CounterData.Marshal(b, m, deterministic)
}
func (m *CounterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterData.Merge(m, src)
}
func (m *CounterData) XXX_Size() int {
	return xxx_messageInfo_CounterData.Size(m)
}
func (m *CounterData) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterData.DiscardUnknown(m)
}

var xxx_messageInfo_CounterData proto.InternalMessageInfo

type isCounterData_Value interface {
	isCounterData_Value()
}

type CounterData_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type CounterData_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type CounterData_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*CounterData_Int64Value) isCounterData_Value() {}

func (*CounterData_DoubleValue) isCounterData_Value() {}

func (*CounterData_StringValue) isCounterData_Value() {}

func (m *CounterData) GetValue() isCounterData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CounterData) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*CounterData_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *CounterData) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*CounterData_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *CounterData) GetStringValue() string {
	if x, ok := m.GetValue().(*CounterData_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CounterData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CounterData_Int64Value)(nil),
		(*CounterData_DoubleValue)(nil),
		(*CounterData_StringValue)(nil),
	}
}

// Extrema messages are used for calculating
// Top-N/Bottom-N metrics.
type ExtremaData struct {
	// Types that are valid to be assigned to Extrema:
	//	*ExtremaData_IntExtremaData
	//	*ExtremaData_DoubleExtremaData
	Extrema              isExtremaData_Extrema `protobuf_oneof:"extrema"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExtremaData) Reset()         { *m = ExtremaData{} }
func (m *ExtremaData) String() string { return proto.CompactTextString(m) }
func (*ExtremaData) ProtoMessage()    {}
func (*ExtremaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{21}
}

func (m *ExtremaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtremaData.Unmarshal(m, b)
}
func (m *ExtremaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtremaData.Marshal(b, m, deterministic)
}
func (m *ExtremaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtremaData.Merge(m, src)
}
func (m *ExtremaData) XXX_Size() int {
	return xxx_messageInfo_ExtremaData.Size(m)
}
func (m *ExtremaData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtremaData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtremaData proto.InternalMessageInfo

type isExtremaData_Extrema interface {
	isExtremaData_Extrema()
}

type ExtremaData_IntExtremaData struct {
	IntExtremaData *IntExtremaData `protobuf:"bytes,1,opt,name=int_extrema_data,json=intExtremaData,proto3,oneof"`
}

type ExtremaData_DoubleExtremaData struct {
	DoubleExtremaData *DoubleExtremaData `protobuf:"bytes,2,opt,name=double_extrema_data,json=doubleExtremaData,proto3,oneof"`
}

func (*ExtremaData_IntExtremaData) isExtremaData_Extrema() {}

func (*ExtremaData_DoubleExtremaData) isExtremaData_Extrema() {}

func (m *ExtremaData) GetExtrema() isExtremaData_Extrema {
	if m != nil {
		return m.Extrema
	}
	return nil
}

func (m *ExtremaData) GetIntExtremaData() *IntExtremaData {
	if x, ok := m.GetExtrema().(*ExtremaData_IntExtremaData); ok {
		return x.IntExtremaData
	}
	return nil
}

func (m *ExtremaData) GetDoubleExtremaData() *DoubleExtremaData {
	if x, ok := m.GetExtrema().(*ExtremaData_DoubleExtremaData); ok {
		return x.DoubleExtremaData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtremaData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtremaData_IntExtremaData)(nil),
		(*ExtremaData_DoubleExtremaData)(nil),
	}
}

type IntExtremaData struct {
	IntValues            []int64  `protobuf:"varint,1,rep,packed,name=int_values,json=intValues,proto3" json:"int_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntExtremaData) Reset()         { *m = IntExtremaData{} }
func (m *IntExtremaData) String() string { return proto.CompactTextString(m) }
func (*IntExtremaData) ProtoMessage()    {}
func (*IntExtremaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{22}
}

func (m *IntExtremaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntExtremaData.Unmarshal(m, b)
}
func (m *IntExtremaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntExtremaData.Marshal(b, m, deterministic)
}
func (m *IntExtremaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntExtremaData.Merge(m, src)
}
func (m *IntExtremaData) XXX_Size() int {
	return xxx_messageInfo_IntExtremaData.Size(m)
}
func (m *IntExtremaData) XXX_DiscardUnknown() {
	xxx_messageInfo_IntExtremaData.DiscardUnknown(m)
}

var xxx_messageInfo_IntExtremaData proto.InternalMessageInfo

func (m *IntExtremaData) GetIntValues() []int64 {
	if m != nil {
		return m.IntValues
	}
	return nil
}

type DoubleExtremaData struct {
	DoubleValues         []float64 `protobuf:"fixed64,2,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DoubleExtremaData) Reset()         { *m = DoubleExtremaData{} }
func (m *DoubleExtremaData) String() string { return proto.CompactTextString(m) }
func (*DoubleExtremaData) ProtoMessage()    {}
func (*DoubleExtremaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{23}
}

func (m *DoubleExtremaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleExtremaData.Unmarshal(m, b)
}
func (m *DoubleExtremaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleExtremaData.Marshal(b, m, deterministic)
}
func (m *DoubleExtremaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleExtremaData.Merge(m, src)
}
func (m *DoubleExtremaData) XXX_Size() int {
	return xxx_messageInfo_DoubleExtremaData.Size(m)
}
func (m *DoubleExtremaData) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleExtremaData.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleExtremaData proto.InternalMessageInfo

func (m *DoubleExtremaData) GetDoubleValues() []float64 {
	if m != nil {
		return m.DoubleValues
	}
	return nil
}

// Data associated with a distribution metric.
// This is based off of the current DistributionData metric.
// This is not a stackdriver or dropwizard compatible
// style of distribution metric.
type DistributionData struct {
	// Types that are valid to be assigned to Distribution:
	//	*DistributionData_IntDistributionData
	//	*DistributionData_DoubleDistributionData
	Distribution         isDistributionData_Distribution `protobuf_oneof:"distribution"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DistributionData) Reset()         { *m = DistributionData{} }
func (m *DistributionData) String() string { return proto.CompactTextString(m) }
func (*DistributionData) ProtoMessage()    {}
func (*DistributionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{24}
}

func (m *DistributionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionData.Unmarshal(m, b)
}
func (m *DistributionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionData.Marshal(b, m, deterministic)
}
func (m *DistributionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionData.Merge(m, src)
}
func (m *DistributionData) XXX_Size() int {
	return xxx_messageInfo_DistributionData.Size(m)
}
func (m *DistributionData) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionData.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionData proto.InternalMessageInfo

type isDistributionData_Distribution interface {
	isDistributionData_Distribution()
}

type DistributionData_IntDistributionData struct {
	IntDistributionData *IntDistributionData `protobuf:"bytes,1,opt,name=int_distribution_data,json=intDistributionData,proto3,oneof"`
}

type DistributionData_DoubleDistributionData struct {
	DoubleDistributionData *DoubleDistributionData `protobuf:"bytes,2,opt,name=double_distribution_data,json=doubleDistributionData,proto3,oneof"`
}

func (*DistributionData_IntDistributionData) isDistributionData_Distribution() {}

func (*DistributionData_DoubleDistributionData) isDistributionData_Distribution() {}

func (m *DistributionData) GetDistribution() isDistributionData_Distribution {
	if m != nil {
		return m.Distribution
	}
	return nil
}

func (m *DistributionData) GetIntDistributionData() *IntDistributionData {
	if x, ok := m.GetDistribution().(*DistributionData_IntDistributionData); ok {
		return x.IntDistributionData
	}
	return nil
}

func (m *DistributionData) GetDoubleDistributionData() *DoubleDistributionData {
	if x, ok := m.GetDistribution().(*DistributionData_DoubleDistributionData); ok {
		return x.DoubleDistributionData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DistributionData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DistributionData_IntDistributionData)(nil),
		(*DistributionData_DoubleDistributionData)(nil),
	}
}

type IntDistributionData struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sum                  int64    `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
	Min                  int64    `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntDistributionData) Reset()         { *m = IntDistributionData{} }
func (m *IntDistributionData) String() string { return proto.CompactTextString(m) }
func (*IntDistributionData) ProtoMessage()    {}
func (*IntDistributionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{25}
}

func (m *IntDistributionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntDistributionData.Unmarshal(m, b)
}
func (m *IntDistributionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntDistributionData.Marshal(b, m, deterministic)
}
func (m *IntDistributionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntDistributionData.Merge(m, src)
}
func (m *IntDistributionData) XXX_Size() int {
	return xxx_messageInfo_IntDistributionData.Size(m)
}
func (m *IntDistributionData) XXX_DiscardUnknown() {
	xxx_messageInfo_IntDistributionData.DiscardUnknown(m)
}

var xxx_messageInfo_IntDistributionData proto.InternalMessageInfo

func (m *IntDistributionData) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *IntDistributionData) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *IntDistributionData) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *IntDistributionData) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type DoubleDistributionData struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sum                  float64  `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	Min                  float64  `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max                  float64  `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleDistributionData) Reset()         { *m = DoubleDistributionData{} }
func (m *DoubleDistributionData) String() string { return proto.CompactTextString(m) }
func (*DoubleDistributionData) ProtoMessage()    {}
func (*DoubleDistributionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{26}
}

func (m *DoubleDistributionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleDistributionData.Unmarshal(m, b)
}
func (m *DoubleDistributionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleDistributionData.Marshal(b, m, deterministic)
}
func (m *DoubleDistributionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleDistributionData.Merge(m, src)
}
func (m *DoubleDistributionData) XXX_Size() int {
	return xxx_messageInfo_DoubleDistributionData.Size(m)
}
func (m *DoubleDistributionData) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleDistributionData.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleDistributionData proto.InternalMessageInfo

func (m *DoubleDistributionData) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DoubleDistributionData) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *DoubleDistributionData) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *DoubleDistributionData) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

// General MonitoredState information which contains
// structured information which does not fit into a typical
// metric format. For example, a table of important files
// and metadata which an I/O source is reading.
// Note: Since MonitoredState is designed to be
// customizable, and allow engines to aggregate these
// metrics in custom ways.
// Engines can use custom aggregation functions for specific URNs
// by inspecting the column values.
// An SDK should always report its current state, that is all
// relevant MonitoredState for its PTransform at the current moment
// and this should be kept small.
// For example, an SDK can emit the oldest three files which
// have been waiting for data for over 1 hour.
// If an engine supports the URN with a custom aggregation then
// it can filter these and keep only the Top-3 rows based on
// how long the files have been waiting for data.
// Otherwise an engine can ignore the MonitoringTableData
// or union all the rows together into one large table and display
// them in a UI.
type MonitoringTableData struct {
	// The number of column names must match the
	// number of values in each MonitoringRow.
	ColumnNames          []string                             `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	RowData              []*MonitoringTableData_MonitoringRow `protobuf:"bytes,2,rep,name=row_data,json=rowData,proto3" json:"row_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *MonitoringTableData) Reset()         { *m = MonitoringTableData{} }
func (m *MonitoringTableData) String() string { return proto.CompactTextString(m) }
func (*MonitoringTableData) ProtoMessage()    {}
func (*MonitoringTableData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{27}
}

func (m *MonitoringTableData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringTableData.Unmarshal(m, b)
}
func (m *MonitoringTableData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringTableData.Marshal(b, m, deterministic)
}
func (m *MonitoringTableData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringTableData.Merge(m, src)
}
func (m *MonitoringTableData) XXX_Size() int {
	return xxx_messageInfo_MonitoringTableData.Size(m)
}
func (m *MonitoringTableData) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringTableData.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringTableData proto.InternalMessageInfo

func (m *MonitoringTableData) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

func (m *MonitoringTableData) GetRowData() []*MonitoringTableData_MonitoringRow {
	if m != nil {
		return m.RowData
	}
	return nil
}

type MonitoringTableData_MonitoringColumnValue struct {
	// Types that are valid to be assigned to Value:
	//	*MonitoringTableData_MonitoringColumnValue_Int64Value
	//	*MonitoringTableData_MonitoringColumnValue_DoubleValue
	//	*MonitoringTableData_MonitoringColumnValue_StringValue
	//	*MonitoringTableData_MonitoringColumnValue_Timestamp
	Value                isMonitoringTableData_MonitoringColumnValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *MonitoringTableData_MonitoringColumnValue) Reset() {
	*m = MonitoringTableData_MonitoringColumnValue{}
}
func (m *MonitoringTableData_MonitoringColumnValue) String() string { return proto.CompactTextString(m) }
func (*MonitoringTableData_MonitoringColumnValue) ProtoMessage()    {}
func (*MonitoringTableData_MonitoringColumnValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{27, 0}
}

func (m *MonitoringTableData_MonitoringColumnValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringTableData_MonitoringColumnValue.Unmarshal(m, b)
}
func (m *MonitoringTableData_MonitoringColumnValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringTableData_MonitoringColumnValue.Marshal(b, m, deterministic)
}
func (m *MonitoringTableData_MonitoringColumnValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringTableData_MonitoringColumnValue.Merge(m, src)
}
func (m *MonitoringTableData_MonitoringColumnValue) XXX_Size() int {
	return xxx_messageInfo_MonitoringTableData_MonitoringColumnValue.Size(m)
}
func (m *MonitoringTableData_MonitoringColumnValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringTableData_MonitoringColumnValue.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringTableData_MonitoringColumnValue proto.InternalMessageInfo

type isMonitoringTableData_MonitoringColumnValue_Value interface {
	isMonitoringTableData_MonitoringColumnValue_Value()
}

type MonitoringTableData_MonitoringColumnValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type MonitoringTableData_MonitoringColumnValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type MonitoringTableData_MonitoringColumnValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type MonitoringTableData_MonitoringColumnValue_Timestamp struct {
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3,oneof"`
}

func (*MonitoringTableData_MonitoringColumnValue_Int64Value) isMonitoringTableData_MonitoringColumnValue_Value() {
}

func (*MonitoringTableData_MonitoringColumnValue_DoubleValue) isMonitoringTableData_MonitoringColumnValue_Value() {
}

func (*MonitoringTableData_MonitoringColumnValue_StringValue) isMonitoringTableData_MonitoringColumnValue_Value() {
}

func (*MonitoringTableData_MonitoringColumnValue_Timestamp) isMonitoringTableData_MonitoringColumnValue_Value() {
}

func (m *MonitoringTableData_MonitoringColumnValue) GetValue() isMonitoringTableData_MonitoringColumnValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MonitoringTableData_MonitoringColumnValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*MonitoringTableData_MonitoringColumnValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *MonitoringTableData_MonitoringColumnValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*MonitoringTableData_MonitoringColumnValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *MonitoringTableData_MonitoringColumnValue) GetStringValue() string {
	if x, ok := m.GetValue().(*MonitoringTableData_MonitoringColumnValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *MonitoringTableData_MonitoringColumnValue) GetTimestamp() *timestamp.Timestamp {
	if x, ok := m.GetValue().(*MonitoringTableData_MonitoringColumnValue_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MonitoringTableData_MonitoringColumnValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MonitoringTableData_MonitoringColumnValue_Int64Value)(nil),
		(*MonitoringTableData_MonitoringColumnValue_DoubleValue)(nil),
		(*MonitoringTableData_MonitoringColumnValue_StringValue)(nil),
		(*MonitoringTableData_MonitoringColumnValue_Timestamp)(nil),
	}
}

type MonitoringTableData_MonitoringRow struct {
	Values               []*MonitoringTableData_MonitoringColumnValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *MonitoringTableData_MonitoringRow) Reset()         { *m = MonitoringTableData_MonitoringRow{} }
func (m *MonitoringTableData_MonitoringRow) String() string { return proto.CompactTextString(m) }
func (*MonitoringTableData_MonitoringRow) ProtoMessage()    {}
func (*MonitoringTableData_MonitoringRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{27, 1}
}

func (m *MonitoringTableData_MonitoringRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitoringTableData_MonitoringRow.Unmarshal(m, b)
}
func (m *MonitoringTableData_MonitoringRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitoringTableData_MonitoringRow.Marshal(b, m, deterministic)
}
func (m *MonitoringTableData_MonitoringRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringTableData_MonitoringRow.Merge(m, src)
}
func (m *MonitoringTableData_MonitoringRow) XXX_Size() int {
	return xxx_messageInfo_MonitoringTableData_MonitoringRow.Size(m)
}
func (m *MonitoringTableData_MonitoringRow) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringTableData_MonitoringRow.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringTableData_MonitoringRow proto.InternalMessageInfo

func (m *MonitoringTableData_MonitoringRow) GetValues() []*MonitoringTableData_MonitoringColumnValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// DEPRECATED
type Metrics struct {
	Ptransforms          map[string]*Metrics_PTransform `protobuf:"bytes,1,rep,name=ptransforms,proto3" json:"ptransforms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28}
}

func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics.Unmarshal(m, b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return xxx_messageInfo_Metrics.Size(m)
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetPtransforms() map[string]*Metrics_PTransform {
	if m != nil {
		return m.Ptransforms
	}
	return nil
}

// PTransform level metrics.
// These metrics are split into processed and active element groups for
// progress reporting purposes. This allows a Runner to see what is measured,
// what is estimated and what can be extrapolated to be able to accurately
// estimate the backlog of remaining work.
type Metrics_PTransform struct {
	// (Required): Metrics for processed elements.
	ProcessedElements *Metrics_PTransform_ProcessedElements `protobuf:"bytes,1,opt,name=processed_elements,json=processedElements,proto3" json:"processed_elements,omitempty"`
	// (Required): Metrics for active elements.
	ActiveElements *Metrics_PTransform_ActiveElements `protobuf:"bytes,2,opt,name=active_elements,json=activeElements,proto3" json:"active_elements,omitempty"`
	// (Optional): Map from local output name to its watermark.
	// The watermarks reported are tentative, to get a better sense of progress
	// while processing a bundle but before it is committed. At bundle commit
	// time, a Runner needs to also take into account the timers set to compute
	// the actual watermarks.
	Watermarks           map[string]int64 `protobuf:"bytes,3,rep,name=watermarks,proto3" json:"watermarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	User                 []*Metrics_User  `protobuf:"bytes,4,rep,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Metrics_PTransform) Reset()         { *m = Metrics_PTransform{} }
func (m *Metrics_PTransform) String() string { return proto.CompactTextString(m) }
func (*Metrics_PTransform) ProtoMessage()    {}
func (*Metrics_PTransform) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 0}
}

func (m *Metrics_PTransform) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_PTransform.Unmarshal(m, b)
}
func (m *Metrics_PTransform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_PTransform.Marshal(b, m, deterministic)
}
func (m *Metrics_PTransform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_PTransform.Merge(m, src)
}
func (m *Metrics_PTransform) XXX_Size() int {
	return xxx_messageInfo_Metrics_PTransform.Size(m)
}
func (m *Metrics_PTransform) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_PTransform.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_PTransform proto.InternalMessageInfo

func (m *Metrics_PTransform) GetProcessedElements() *Metrics_PTransform_ProcessedElements {
	if m != nil {
		return m.ProcessedElements
	}
	return nil
}

func (m *Metrics_PTransform) GetActiveElements() *Metrics_PTransform_ActiveElements {
	if m != nil {
		return m.ActiveElements
	}
	return nil
}

func (m *Metrics_PTransform) GetWatermarks() map[string]int64 {
	if m != nil {
		return m.Watermarks
	}
	return nil
}

func (m *Metrics_PTransform) GetUser() []*Metrics_User {
	if m != nil {
		return m.User
	}
	return nil
}

// Metrics that are measured for processed and active element groups.
type Metrics_PTransform_Measured struct {
	// (Optional) Map from local input name to number of elements processed
	// from this input.
	// If unset, assumed to be the sum of the outputs of all producers to
	// this transform (for ProcessedElements) and 0 (for ActiveElements).
	InputElementCounts map[string]int64 `protobuf:"bytes,1,rep,name=input_element_counts,json=inputElementCounts,proto3" json:"input_element_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// (Required) Map from local output name to number of elements produced
	// for this output.
	OutputElementCounts map[string]int64 `protobuf:"bytes,2,rep,name=output_element_counts,json=outputElementCounts,proto3" json:"output_element_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// (Optional) The total time spent so far in processing the elements in
	// this group, in seconds.
	TotalTimeSpent       float64  `protobuf:"fixed64,3,opt,name=total_time_spent,json=totalTimeSpent,proto3" json:"total_time_spent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metrics_PTransform_Measured) Reset()         { *m = Metrics_PTransform_Measured{} }
func (m *Metrics_PTransform_Measured) String() string { return proto.CompactTextString(m) }
func (*Metrics_PTransform_Measured) ProtoMessage()    {}
func (*Metrics_PTransform_Measured) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 0, 0}
}

func (m *Metrics_PTransform_Measured) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_PTransform_Measured.Unmarshal(m, b)
}
func (m *Metrics_PTransform_Measured) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_PTransform_Measured.Marshal(b, m, deterministic)
}
func (m *Metrics_PTransform_Measured) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_PTransform_Measured.Merge(m, src)
}
func (m *Metrics_PTransform_Measured) XXX_Size() int {
	return xxx_messageInfo_Metrics_PTransform_Measured.Size(m)
}
func (m *Metrics_PTransform_Measured) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_PTransform_Measured.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_PTransform_Measured proto.InternalMessageInfo

func (m *Metrics_PTransform_Measured) GetInputElementCounts() map[string]int64 {
	if m != nil {
		return m.InputElementCounts
	}
	return nil
}

func (m *Metrics_PTransform_Measured) GetOutputElementCounts() map[string]int64 {
	if m != nil {
		return m.OutputElementCounts
	}
	return nil
}

func (m *Metrics_PTransform_Measured) GetTotalTimeSpent() float64 {
	if m != nil {
		return m.TotalTimeSpent
	}
	return 0
}

// Metrics for fully processed elements.
type Metrics_PTransform_ProcessedElements struct {
	// (Required)
	Measured             *Metrics_PTransform_Measured `protobuf:"bytes,1,opt,name=measured,proto3" json:"measured,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Metrics_PTransform_ProcessedElements) Reset()         { *m = Metrics_PTransform_ProcessedElements{} }
func (m *Metrics_PTransform_ProcessedElements) String() string { return proto.CompactTextString(m) }
func (*Metrics_PTransform_ProcessedElements) ProtoMessage()    {}
func (*Metrics_PTransform_ProcessedElements) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 0, 1}
}

func (m *Metrics_PTransform_ProcessedElements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_PTransform_ProcessedElements.Unmarshal(m, b)
}
func (m *Metrics_PTransform_ProcessedElements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_PTransform_ProcessedElements.Marshal(b, m, deterministic)
}
func (m *Metrics_PTransform_ProcessedElements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_PTransform_ProcessedElements.Merge(m, src)
}
func (m *Metrics_PTransform_ProcessedElements) XXX_Size() int {
	return xxx_messageInfo_Metrics_PTransform_ProcessedElements.Size(m)
}
func (m *Metrics_PTransform_ProcessedElements) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_PTransform_ProcessedElements.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_PTransform_ProcessedElements proto.InternalMessageInfo

func (m *Metrics_PTransform_ProcessedElements) GetMeasured() *Metrics_PTransform_Measured {
	if m != nil {
		return m.Measured
	}
	return nil
}

// Metrics for active elements.
// An element is considered active if the SDK has started but not finished
// processing it yet.
type Metrics_PTransform_ActiveElements struct {
	// (Required)
	Measured *Metrics_PTransform_Measured `protobuf:"bytes,1,opt,name=measured,proto3" json:"measured,omitempty"`
	// (Optional) Sum of estimated fraction of known work remaining for all
	// active elements, as reported by this transform.
	// If not reported, a Runner could extrapolate this from the processed
	// elements.
	// TODO: Handle the case when known work is infinite.
	FractionRemaining float64 `protobuf:"fixed64,2,opt,name=fraction_remaining,json=fractionRemaining,proto3" json:"fraction_remaining,omitempty"`
	// (Optional) Map from local output name to sum of estimated number
	// of elements remaining for this output from all active elements,
	// as reported by this transform.
	// If not reported, a Runner could extrapolate this from the processed
	// elements.
	OutputElementsRemaining map[string]int64 `protobuf:"bytes,3,rep,name=output_elements_remaining,json=outputElementsRemaining,proto3" json:"output_elements_remaining,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *Metrics_PTransform_ActiveElements) Reset()         { *m = Metrics_PTransform_ActiveElements{} }
func (m *Metrics_PTransform_ActiveElements) String() string { return proto.CompactTextString(m) }
func (*Metrics_PTransform_ActiveElements) ProtoMessage()    {}
func (*Metrics_PTransform_ActiveElements) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 0, 2}
}

func (m *Metrics_PTransform_ActiveElements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_PTransform_ActiveElements.Unmarshal(m, b)
}
func (m *Metrics_PTransform_ActiveElements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_PTransform_ActiveElements.Marshal(b, m, deterministic)
}
func (m *Metrics_PTransform_ActiveElements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_PTransform_ActiveElements.Merge(m, src)
}
func (m *Metrics_PTransform_ActiveElements) XXX_Size() int {
	return xxx_messageInfo_Metrics_PTransform_ActiveElements.Size(m)
}
func (m *Metrics_PTransform_ActiveElements) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_PTransform_ActiveElements.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_PTransform_ActiveElements proto.InternalMessageInfo

func (m *Metrics_PTransform_ActiveElements) GetMeasured() *Metrics_PTransform_Measured {
	if m != nil {
		return m.Measured
	}
	return nil
}

func (m *Metrics_PTransform_ActiveElements) GetFractionRemaining() float64 {
	if m != nil {
		return m.FractionRemaining
	}
	return 0
}

func (m *Metrics_PTransform_ActiveElements) GetOutputElementsRemaining() map[string]int64 {
	if m != nil {
		return m.OutputElementsRemaining
	}
	return nil
}

// User defined metrics
type Metrics_User struct {
	// (Required) The identifier for this metric.
	MetricName *Metrics_User_MetricName `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// (Required) The data for this metric.
	//
	// Types that are valid to be assigned to Data:
	//	*Metrics_User_CounterData_
	//	*Metrics_User_DistributionData_
	//	*Metrics_User_GaugeData_
	Data                 isMetrics_User_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Metrics_User) Reset()         { *m = Metrics_User{} }
func (m *Metrics_User) String() string { return proto.CompactTextString(m) }
func (*Metrics_User) ProtoMessage()    {}
func (*Metrics_User) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 1}
}

func (m *Metrics_User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_User.Unmarshal(m, b)
}
func (m *Metrics_User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_User.Marshal(b, m, deterministic)
}
func (m *Metrics_User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_User.Merge(m, src)
}
func (m *Metrics_User) XXX_Size() int {
	return xxx_messageInfo_Metrics_User.Size(m)
}
func (m *Metrics_User) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_User.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_User proto.InternalMessageInfo

func (m *Metrics_User) GetMetricName() *Metrics_User_MetricName {
	if m != nil {
		return m.MetricName
	}
	return nil
}

type isMetrics_User_Data interface {
	isMetrics_User_Data()
}

type Metrics_User_CounterData_ struct {
	CounterData *Metrics_User_CounterData `protobuf:"bytes,1001,opt,name=counter_data,json=counterData,proto3,oneof"`
}

type Metrics_User_DistributionData_ struct {
	DistributionData *Metrics_User_DistributionData `protobuf:"bytes,1002,opt,name=distribution_data,json=distributionData,proto3,oneof"`
}

type Metrics_User_GaugeData_ struct {
	GaugeData *Metrics_User_GaugeData `protobuf:"bytes,1003,opt,name=gauge_data,json=gaugeData,proto3,oneof"`
}

func (*Metrics_User_CounterData_) isMetrics_User_Data() {}

func (*Metrics_User_DistributionData_) isMetrics_User_Data() {}

func (*Metrics_User_GaugeData_) isMetrics_User_Data() {}

func (m *Metrics_User) GetData() isMetrics_User_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Metrics_User) GetCounterData() *Metrics_User_CounterData {
	if x, ok := m.GetData().(*Metrics_User_CounterData_); ok {
		return x.CounterData
	}
	return nil
}

func (m *Metrics_User) GetDistributionData() *Metrics_User_DistributionData {
	if x, ok := m.GetData().(*Metrics_User_DistributionData_); ok {
		return x.DistributionData
	}
	return nil
}

func (m *Metrics_User) GetGaugeData() *Metrics_User_GaugeData {
	if x, ok := m.GetData().(*Metrics_User_GaugeData_); ok {
		return x.GaugeData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metrics_User) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metrics_User_CounterData_)(nil),
		(*Metrics_User_DistributionData_)(nil),
		(*Metrics_User_GaugeData_)(nil),
	}
}

// A key for identifying a metric at the most granular level.
type Metrics_User_MetricName struct {
	// (Required): The namespace of this metric.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// (Required): The name of this metric.
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metrics_User_MetricName) Reset()         { *m = Metrics_User_MetricName{} }
func (m *Metrics_User_MetricName) String() string { return proto.CompactTextString(m) }
func (*Metrics_User_MetricName) ProtoMessage()    {}
func (*Metrics_User_MetricName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 1, 0}
}

func (m *Metrics_User_MetricName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_User_MetricName.Unmarshal(m, b)
}
func (m *Metrics_User_MetricName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_User_MetricName.Marshal(b, m, deterministic)
}
func (m *Metrics_User_MetricName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_User_MetricName.Merge(m, src)
}
func (m *Metrics_User_MetricName) XXX_Size() int {
	return xxx_messageInfo_Metrics_User_MetricName.Size(m)
}
func (m *Metrics_User_MetricName) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_User_MetricName.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_User_MetricName proto.InternalMessageInfo

func (m *Metrics_User_MetricName) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Metrics_User_MetricName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Data associated with a counter metric.
type Metrics_User_CounterData struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metrics_User_CounterData) Reset()         { *m = Metrics_User_CounterData{} }
func (m *Metrics_User_CounterData) String() string { return proto.CompactTextString(m) }
func (*Metrics_User_CounterData) ProtoMessage()    {}
func (*Metrics_User_CounterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 1, 1}
}

func (m *Metrics_User_CounterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_User_CounterData.Unmarshal(m, b)
}
func (m *Metrics_User_CounterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_User_CounterData.Marshal(b, m, deterministic)
}
func (m *Metrics_User_CounterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_User_CounterData.Merge(m, src)
}
func (m *Metrics_User_CounterData) XXX_Size() int {
	return xxx_messageInfo_Metrics_User_CounterData.Size(m)
}
func (m *Metrics_User_CounterData) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_User_CounterData.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_User_CounterData proto.InternalMessageInfo

func (m *Metrics_User_CounterData) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Data associated with a distribution metric.
type Metrics_User_DistributionData struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sum                  int64    `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
	Min                  int64    `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metrics_User_DistributionData) Reset()         { *m = Metrics_User_DistributionData{} }
func (m *Metrics_User_DistributionData) String() string { return proto.CompactTextString(m) }
func (*Metrics_User_DistributionData) ProtoMessage()    {}
func (*Metrics_User_DistributionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 1, 2}
}

func (m *Metrics_User_DistributionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_User_DistributionData.Unmarshal(m, b)
}
func (m *Metrics_User_DistributionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_User_DistributionData.Marshal(b, m, deterministic)
}
func (m *Metrics_User_DistributionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_User_DistributionData.Merge(m, src)
}
func (m *Metrics_User_DistributionData) XXX_Size() int {
	return xxx_messageInfo_Metrics_User_DistributionData.Size(m)
}
func (m *Metrics_User_DistributionData) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_User_DistributionData.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_User_DistributionData proto.InternalMessageInfo

func (m *Metrics_User_DistributionData) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Metrics_User_DistributionData) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *Metrics_User_DistributionData) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Metrics_User_DistributionData) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

// Data associated with a Gauge metric.
type Metrics_User_GaugeData struct {
	Value                int64                `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Metrics_User_GaugeData) Reset()         { *m = Metrics_User_GaugeData{} }
func (m *Metrics_User_GaugeData) String() string { return proto.CompactTextString(m) }
func (*Metrics_User_GaugeData) ProtoMessage()    {}
func (*Metrics_User_GaugeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{28, 1, 3}
}

func (m *Metrics_User_GaugeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics_User_GaugeData.Unmarshal(m, b)
}
func (m *Metrics_User_GaugeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics_User_GaugeData.Marshal(b, m, deterministic)
}
func (m *Metrics_User_GaugeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_User_GaugeData.Merge(m, src)
}
func (m *Metrics_User_GaugeData) XXX_Size() int {
	return xxx_messageInfo_Metrics_User_GaugeData.Size(m)
}
func (m *Metrics_User_GaugeData) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_User_GaugeData.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_User_GaugeData proto.InternalMessageInfo

func (m *Metrics_User_GaugeData) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metrics_User_GaugeData) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type ProcessBundleProgressResponse struct {
	// DEPRECATED (Required)
	Metrics *Metrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// (Required) The list of metrics or other MonitoredState
	// collected while processing this bundle.
	MonitoringInfos []*MonitoringInfo `protobuf:"bytes,3,rep,name=monitoring_infos,json=monitoringInfos,proto3" json:"monitoring_infos,omitempty"`
	// The list of currently active primary roots that are being
	// executed. Required to be populated for PTransforms which can be split.
	PrimaryRoots         []*BundleApplication `protobuf:"bytes,4,rep,name=primary_roots,json=primaryRoots,proto3" json:"primary_roots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProcessBundleProgressResponse) Reset()         { *m = ProcessBundleProgressResponse{} }
func (m *ProcessBundleProgressResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleProgressResponse) ProtoMessage()    {}
func (*ProcessBundleProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{29}
}

func (m *ProcessBundleProgressResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleProgressResponse.Unmarshal(m, b)
}
func (m *ProcessBundleProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleProgressResponse.Marshal(b, m, deterministic)
}
func (m *ProcessBundleProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleProgressResponse.Merge(m, src)
}
func (m *ProcessBundleProgressResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleProgressResponse.Size(m)
}
func (m *ProcessBundleProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleProgressResponse proto.InternalMessageInfo

func (m *ProcessBundleProgressResponse) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ProcessBundleProgressResponse) GetMonitoringInfos() []*MonitoringInfo {
	if m != nil {
		return m.MonitoringInfos
	}
	return nil
}

func (m *ProcessBundleProgressResponse) GetPrimaryRoots() []*BundleApplication {
	if m != nil {
		return m.PrimaryRoots
	}
	return nil
}

// Represents a request to the SDK to split a currently active bundle.
type ProcessBundleSplitRequest struct {
	// (Required) A reference to an active process bundle request with the given
	// instruction id.
	InstructionReference string `protobuf:"bytes,1,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	// (Required) Specifies that the Runner would like the bundle to split itself
	// such that it performs no more work than the backlog specified for each
	// PTransform. The interpretation of how much work should be processed is up
	// to the PTransform.
	//
	// For example, A backlog of "" tells the SDK to perform as little work as
	// possible, effectively checkpointing when able. The remaining backlog
	// will be relative to the backlog reported during processing.
	//
	// If the backlog is unspecified for a PTransform, the runner would like
	// the SDK to process all data received for that PTransform.
	BacklogRemaining map[string][]byte `protobuf:"bytes,2,rep,name=backlog_remaining,json=backlogRemaining,proto3" json:"backlog_remaining,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) Specifies the desired split for each transform.
	//
	// Currently only splits at GRPC read operations are supported.
	// This may, of course, limit the amount of work downstream operations
	// receive.
	DesiredSplits        map[string]*ProcessBundleSplitRequest_DesiredSplit `protobuf:"bytes,3,rep,name=desired_splits,json=desiredSplits,proto3" json:"desired_splits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ProcessBundleSplitRequest) Reset()         { *m = ProcessBundleSplitRequest{} }
func (m *ProcessBundleSplitRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleSplitRequest) ProtoMessage()    {}
func (*ProcessBundleSplitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{30}
}

func (m *ProcessBundleSplitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleSplitRequest.Unmarshal(m, b)
}
func (m *ProcessBundleSplitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleSplitRequest.Marshal(b, m, deterministic)
}
func (m *ProcessBundleSplitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleSplitRequest.Merge(m, src)
}
func (m *ProcessBundleSplitRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleSplitRequest.Size(m)
}
func (m *ProcessBundleSplitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleSplitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleSplitRequest proto.InternalMessageInfo

func (m *ProcessBundleSplitRequest) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

func (m *ProcessBundleSplitRequest) GetBacklogRemaining() map[string][]byte {
	if m != nil {
		return m.BacklogRemaining
	}
	return nil
}

func (m *ProcessBundleSplitRequest) GetDesiredSplits() map[string]*ProcessBundleSplitRequest_DesiredSplit {
	if m != nil {
		return m.DesiredSplits
	}
	return nil
}

// A message specifying the desired split for a single transform.
type ProcessBundleSplitRequest_DesiredSplit struct {
	// (Required) The fraction of known work remaining in this bundle
	// for this transform that should be kept by the SDK after this split.
	//
	// Set to 0 to "checkpoint" as soon as possible (keeping as little work as
	// possible and returning the remainder).
	FractionOfRemainder float32 `protobuf:"fixed32,1,opt,name=fraction_of_remainder,json=fractionOfRemainder,proto3" json:"fraction_of_remainder,omitempty"`
	// A set of allowed indices where the SDK may split. When this is empty,
	// there are no constraints on where to split.
	AllowedSplitPoints []int64 `protobuf:"varint,3,rep,packed,name=allowed_split_points,json=allowedSplitPoints,proto3" json:"allowed_split_points,omitempty"`
	// (Required for GrpcRead operations) Number of total elements expected
	// to be sent to this GrpcRead operation, required to correctly account
	// for unreceived data when determining where to split.
	EstimatedInputElements int64    `protobuf:"varint,2,opt,name=estimated_input_elements,json=estimatedInputElements,proto3" json:"estimated_input_elements,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ProcessBundleSplitRequest_DesiredSplit) Reset() {
	*m = ProcessBundleSplitRequest_DesiredSplit{}
}
func (m *ProcessBundleSplitRequest_DesiredSplit) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleSplitRequest_DesiredSplit) ProtoMessage()    {}
func (*ProcessBundleSplitRequest_DesiredSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{30, 1}
}

func (m *ProcessBundleSplitRequest_DesiredSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit.Unmarshal(m, b)
}
func (m *ProcessBundleSplitRequest_DesiredSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit.Marshal(b, m, deterministic)
}
func (m *ProcessBundleSplitRequest_DesiredSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit.Merge(m, src)
}
func (m *ProcessBundleSplitRequest_DesiredSplit) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit.Size(m)
}
func (m *ProcessBundleSplitRequest_DesiredSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleSplitRequest_DesiredSplit proto.InternalMessageInfo

func (m *ProcessBundleSplitRequest_DesiredSplit) GetFractionOfRemainder() float32 {
	if m != nil {
		return m.FractionOfRemainder
	}
	return 0
}

func (m *ProcessBundleSplitRequest_DesiredSplit) GetAllowedSplitPoints() []int64 {
	if m != nil {
		return m.AllowedSplitPoints
	}
	return nil
}

func (m *ProcessBundleSplitRequest_DesiredSplit) GetEstimatedInputElements() int64 {
	if m != nil {
		return m.EstimatedInputElements
	}
	return 0
}

// Represents a partition of the bundle: a "primary" and
// a "residual", with the following properties:
// - The work in primary and residual doesn't overlap, and combined, adds up
//   to the work in the current bundle if the split hadn't happened.
// - The current bundle, if it keeps executing, will have done none of the
//   work under residual_roots.
// - The current bundle, if no further splits happen, will have done exactly
//   the work under primary_roots.
// For more rigorous definitions see https://s.apache.org/beam-breaking-fusion
type ProcessBundleSplitResponse struct {
	// Root applications that should replace the current bundle.
	PrimaryRoots []*BundleApplication `protobuf:"bytes,1,rep,name=primary_roots,json=primaryRoots,proto3" json:"primary_roots,omitempty"`
	// Root applications that have been removed from the current bundle and
	// have to be executed in a separate bundle (e.g. in parallel on a different
	// worker, or after the current bundle completes, etc.)
	ResidualRoots []*DelayedBundleApplication `protobuf:"bytes,2,rep,name=residual_roots,json=residualRoots,proto3" json:"residual_roots,omitempty"`
	// Partitions of input data channels into primary and residual elements,
	// if any. Should not include any elements represented in the bundle
	// applications roots above.
	ChannelSplits        []*ProcessBundleSplitResponse_ChannelSplit `protobuf:"bytes,3,rep,name=channel_splits,json=channelSplits,proto3" json:"channel_splits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ProcessBundleSplitResponse) Reset()         { *m = ProcessBundleSplitResponse{} }
func (m *ProcessBundleSplitResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleSplitResponse) ProtoMessage()    {}
func (*ProcessBundleSplitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{31}
}

func (m *ProcessBundleSplitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleSplitResponse.Unmarshal(m, b)
}
func (m *ProcessBundleSplitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleSplitResponse.Marshal(b, m, deterministic)
}
func (m *ProcessBundleSplitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleSplitResponse.Merge(m, src)
}
func (m *ProcessBundleSplitResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleSplitResponse.Size(m)
}
func (m *ProcessBundleSplitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleSplitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleSplitResponse proto.InternalMessageInfo

func (m *ProcessBundleSplitResponse) GetPrimaryRoots() []*BundleApplication {
	if m != nil {
		return m.PrimaryRoots
	}
	return nil
}

func (m *ProcessBundleSplitResponse) GetResidualRoots() []*DelayedBundleApplication {
	if m != nil {
		return m.ResidualRoots
	}
	return nil
}

func (m *ProcessBundleSplitResponse) GetChannelSplits() []*ProcessBundleSplitResponse_ChannelSplit {
	if m != nil {
		return m.ChannelSplits
	}
	return nil
}

// Represents contiguous portions of the data channel that are either
// entirely processed or entirely unprocessed and belong to the primary
// or residual respectively.
//
// This affords both a more efficient representation over the FnAPI
// (if the bundle is large) and often a more efficient representation
// on the runner side (e.g. if the set of elements can be represented
// as some range in an underlying dataset).
type ProcessBundleSplitResponse_ChannelSplit struct {
	// (Required) The grpc read transform reading this channel.
	PtransformId string `protobuf:"bytes,1,opt,name=ptransform_id,json=ptransformId,proto3" json:"ptransform_id,omitempty"`
	// (Required) Name of the transform's input to which to pass the element.
	InputId string `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	// The last element of the input channel that should be entirely considered
	// part of the primary, identified by its absolute index in the (ordered)
	// channel.
	LastPrimaryElement int32 `protobuf:"varint,3,opt,name=last_primary_element,json=lastPrimaryElement,proto3" json:"last_primary_element,omitempty"`
	// The first element of the input channel that should be entirely considered
	// part of the residual, identified by its absolute index in the (ordered)
	// channel.
	FirstResidualElement int32    `protobuf:"varint,4,opt,name=first_residual_element,json=firstResidualElement,proto3" json:"first_residual_element,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessBundleSplitResponse_ChannelSplit) Reset() {
	*m = ProcessBundleSplitResponse_ChannelSplit{}
}
func (m *ProcessBundleSplitResponse_ChannelSplit) String() string { return proto.CompactTextString(m) }
func (*ProcessBundleSplitResponse_ChannelSplit) ProtoMessage()    {}
func (*ProcessBundleSplitResponse_ChannelSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{31, 0}
}

func (m *ProcessBundleSplitResponse_ChannelSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit.Unmarshal(m, b)
}
func (m *ProcessBundleSplitResponse_ChannelSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit.Marshal(b, m, deterministic)
}
func (m *ProcessBundleSplitResponse_ChannelSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit.Merge(m, src)
}
func (m *ProcessBundleSplitResponse_ChannelSplit) XXX_Size() int {
	return xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit.Size(m)
}
func (m *ProcessBundleSplitResponse_ChannelSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessBundleSplitResponse_ChannelSplit proto.InternalMessageInfo

func (m *ProcessBundleSplitResponse_ChannelSplit) GetPtransformId() string {
	if m != nil {
		return m.PtransformId
	}
	return ""
}

func (m *ProcessBundleSplitResponse_ChannelSplit) GetInputId() string {
	if m != nil {
		return m.InputId
	}
	return ""
}

func (m *ProcessBundleSplitResponse_ChannelSplit) GetLastPrimaryElement() int32 {
	if m != nil {
		return m.LastPrimaryElement
	}
	return 0
}

func (m *ProcessBundleSplitResponse_ChannelSplit) GetFirstResidualElement() int32 {
	if m != nil {
		return m.FirstResidualElement
	}
	return 0
}

type FinalizeBundleRequest struct {
	// (Required) A reference to a completed process bundle request with the given
	// instruction id.
	InstructionReference string   `protobuf:"bytes,1,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinalizeBundleRequest) Reset()         { *m = FinalizeBundleRequest{} }
func (m *FinalizeBundleRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeBundleRequest) ProtoMessage()    {}
func (*FinalizeBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{32}
}

func (m *FinalizeBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeBundleRequest.Unmarshal(m, b)
}
func (m *FinalizeBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeBundleRequest.Marshal(b, m, deterministic)
}
func (m *FinalizeBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeBundleRequest.Merge(m, src)
}
func (m *FinalizeBundleRequest) XXX_Size() int {
	return xxx_messageInfo_FinalizeBundleRequest.Size(m)
}
func (m *FinalizeBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeBundleRequest proto.InternalMessageInfo

func (m *FinalizeBundleRequest) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

type FinalizeBundleResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinalizeBundleResponse) Reset()         { *m = FinalizeBundleResponse{} }
func (m *FinalizeBundleResponse) String() string { return proto.CompactTextString(m) }
func (*FinalizeBundleResponse) ProtoMessage()    {}
func (*FinalizeBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{33}
}

func (m *FinalizeBundleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeBundleResponse.Unmarshal(m, b)
}
func (m *FinalizeBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeBundleResponse.Marshal(b, m, deterministic)
}
func (m *FinalizeBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeBundleResponse.Merge(m, src)
}
func (m *FinalizeBundleResponse) XXX_Size() int {
	return xxx_messageInfo_FinalizeBundleResponse.Size(m)
}
func (m *FinalizeBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeBundleResponse proto.InternalMessageInfo

// Messages used to represent logical byte streams.
// Stable
type Elements struct {
	// (Required) A list containing parts of logical byte streams.
	Data                 []*Elements_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Elements) Reset()         { *m = Elements{} }
func (m *Elements) String() string { return proto.CompactTextString(m) }
func (*Elements) ProtoMessage()    {}
func (*Elements) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{34}
}

func (m *Elements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Elements.Unmarshal(m, b)
}
func (m *Elements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Elements.Marshal(b, m, deterministic)
}
func (m *Elements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Elements.Merge(m, src)
}
func (m *Elements) XXX_Size() int {
	return xxx_messageInfo_Elements.Size(m)
}
func (m *Elements) XXX_DiscardUnknown() {
	xxx_messageInfo_Elements.DiscardUnknown(m)
}

var xxx_messageInfo_Elements proto.InternalMessageInfo

func (m *Elements) GetData() []*Elements_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// Represents multiple encoded elements in nested context for a given named
// instruction and target.
type Elements_Data struct {
	// (Required) A reference to an active instruction request with the given
	// instruction id.
	InstructionReference string `protobuf:"bytes,1,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	// (Required) A definition representing a consumer or producer of this data.
	// If received by a harness, this represents the consumer within that
	// harness that should consume these bytes. If sent by a harness, this
	// represents the producer of these bytes.
	//
	// Note that a single element may span multiple Data messages.
	//
	// Note that a sending/receiving pair should share the same target
	// identifier.
	Target *Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// (Optional) Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// concatenated together.
	//
	// An empty data block represents the end of stream for the given
	// instruction and target.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Elements_Data) Reset()         { *m = Elements_Data{} }
func (m *Elements_Data) String() string { return proto.CompactTextString(m) }
func (*Elements_Data) ProtoMessage()    {}
func (*Elements_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{34, 0}
}

func (m *Elements_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Elements_Data.Unmarshal(m, b)
}
func (m *Elements_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Elements_Data.Marshal(b, m, deterministic)
}
func (m *Elements_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Elements_Data.Merge(m, src)
}
func (m *Elements_Data) XXX_Size() int {
	return xxx_messageInfo_Elements_Data.Size(m)
}
func (m *Elements_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Elements_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Elements_Data proto.InternalMessageInfo

func (m *Elements_Data) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

func (m *Elements_Data) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Elements_Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StateRequest struct {
	// (Required) An unique identifier provided by the SDK which represents this
	// requests execution. The StateResponse corresponding with this request
	// will have the matching id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Required) The associated instruction id of the work that is currently
	// being processed. This allows for the runner to associate any modifications
	// to state to be committed with the appropriate work execution.
	InstructionReference string `protobuf:"bytes,2,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	// (Required) The state key this request is for.
	StateKey *StateKey `protobuf:"bytes,3,opt,name=state_key,json=stateKey,proto3" json:"state_key,omitempty"`
	// (Required) The action to take on this request.
	//
	// Types that are valid to be assigned to Request:
	//	*StateRequest_Get
	//	*StateRequest_Append
	//	*StateRequest_Clear
	Request              isStateRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StateRequest) Reset()         { *m = StateRequest{} }
func (m *StateRequest) String() string { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()    {}
func (*StateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{35}
}

func (m *StateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateRequest.Unmarshal(m, b)
}
func (m *StateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateRequest.Marshal(b, m, deterministic)
}
func (m *StateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateRequest.Merge(m, src)
}
func (m *StateRequest) XXX_Size() int {
	return xxx_messageInfo_StateRequest.Size(m)
}
func (m *StateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateRequest proto.InternalMessageInfo

func (m *StateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StateRequest) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

func (m *StateRequest) GetStateKey() *StateKey {
	if m != nil {
		return m.StateKey
	}
	return nil
}

type isStateRequest_Request interface {
	isStateRequest_Request()
}

type StateRequest_Get struct {
	Get *StateGetRequest `protobuf:"bytes,1000,opt,name=get,proto3,oneof"`
}

type StateRequest_Append struct {
	Append *StateAppendRequest `protobuf:"bytes,1001,opt,name=append,proto3,oneof"`
}

type StateRequest_Clear struct {
	Clear *StateClearRequest `protobuf:"bytes,1002,opt,name=clear,proto3,oneof"`
}

func (*StateRequest_Get) isStateRequest_Request() {}

func (*StateRequest_Append) isStateRequest_Request() {}

func (*StateRequest_Clear) isStateRequest_Request() {}

func (m *StateRequest) GetRequest() isStateRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *StateRequest) GetGet() *StateGetRequest {
	if x, ok := m.GetRequest().(*StateRequest_Get); ok {
		return x.Get
	}
	return nil
}

func (m *StateRequest) GetAppend() *StateAppendRequest {
	if x, ok := m.GetRequest().(*StateRequest_Append); ok {
		return x.Append
	}
	return nil
}

func (m *StateRequest) GetClear() *StateClearRequest {
	if x, ok := m.GetRequest().(*StateRequest_Clear); ok {
		return x.Clear
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateRequest_Get)(nil),
		(*StateRequest_Append)(nil),
		(*StateRequest_Clear)(nil),
	}
}

type StateResponse struct {
	// (Required) A reference provided by the SDK which represents a requests
	// execution. The StateResponse must have the matching id when responding
	// to the SDK.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Optional) If this is specified, then the state request has failed.
	// A human readable string representing the reason as to why the request
	// failed.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// (Optional) If this is specified, then the result of this state request
	// can be cached using the supplied token.
	CacheToken []byte `protobuf:"bytes,3,opt,name=cache_token,json=cacheToken,proto3" json:"cache_token,omitempty"`
	// A corresponding response matching the request will be populated.
	//
	// Types that are valid to be assigned to Response:
	//	*StateResponse_Get
	//	*StateResponse_Append
	//	*StateResponse_Clear
	Response             isStateResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StateResponse) Reset()         { *m = StateResponse{} }
func (m *StateResponse) String() string { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()    {}
func (*StateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{36}
}

func (m *StateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateResponse.Unmarshal(m, b)
}
func (m *StateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateResponse.Marshal(b, m, deterministic)
}
func (m *StateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateResponse.Merge(m, src)
}
func (m *StateResponse) XXX_Size() int {
	return xxx_messageInfo_StateResponse.Size(m)
}
func (m *StateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateResponse proto.InternalMessageInfo

func (m *StateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StateResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StateResponse) GetCacheToken() []byte {
	if m != nil {
		return m.CacheToken
	}
	return nil
}

type isStateResponse_Response interface {
	isStateResponse_Response()
}

type StateResponse_Get struct {
	Get *StateGetResponse `protobuf:"bytes,1000,opt,name=get,proto3,oneof"`
}

type StateResponse_Append struct {
	Append *StateAppendResponse `protobuf:"bytes,1001,opt,name=append,proto3,oneof"`
}

type StateResponse_Clear struct {
	Clear *StateClearResponse `protobuf:"bytes,1002,opt,name=clear,proto3,oneof"`
}

func (*StateResponse_Get) isStateResponse_Response() {}

func (*StateResponse_Append) isStateResponse_Response() {}

func (*StateResponse_Clear) isStateResponse_Response() {}

func (m *StateResponse) GetResponse() isStateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *StateResponse) GetGet() *StateGetResponse {
	if x, ok := m.GetResponse().(*StateResponse_Get); ok {
		return x.Get
	}
	return nil
}

func (m *StateResponse) GetAppend() *StateAppendResponse {
	if x, ok := m.GetResponse().(*StateResponse_Append); ok {
		return x.Append
	}
	return nil
}

func (m *StateResponse) GetClear() *StateClearResponse {
	if x, ok := m.GetResponse().(*StateResponse_Clear); ok {
		return x.Clear
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateResponse_Get)(nil),
		(*StateResponse_Append)(nil),
		(*StateResponse_Clear)(nil),
	}
}

type StateKey struct {
	// (Required) One of the following state keys must be set.
	//
	// Types that are valid to be assigned to Type:
	//	*StateKey_Runner_
	//	*StateKey_MultimapSideInput_
	//	*StateKey_BagUserState_
	Type                 isStateKey_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StateKey) Reset()         { *m = StateKey{} }
func (m *StateKey) String() string { return proto.CompactTextString(m) }
func (*StateKey) ProtoMessage()    {}
func (*StateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{37}
}

func (m *StateKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateKey.Unmarshal(m, b)
}
func (m *StateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateKey.Marshal(b, m, deterministic)
}
func (m *StateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateKey.Merge(m, src)
}
func (m *StateKey) XXX_Size() int {
	return xxx_messageInfo_StateKey.Size(m)
}
func (m *StateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_StateKey.DiscardUnknown(m)
}

var xxx_messageInfo_StateKey proto.InternalMessageInfo

type isStateKey_Type interface {
	isStateKey_Type()
}

type StateKey_Runner_ struct {
	Runner *StateKey_Runner `protobuf:"bytes,1,opt,name=runner,proto3,oneof"`
}

type StateKey_MultimapSideInput_ struct {
	MultimapSideInput *StateKey_MultimapSideInput `protobuf:"bytes,2,opt,name=multimap_side_input,json=multimapSideInput,proto3,oneof"`
}

type StateKey_BagUserState_ struct {
	BagUserState *StateKey_BagUserState `protobuf:"bytes,3,opt,name=bag_user_state,json=bagUserState,proto3,oneof"`
}

func (*StateKey_Runner_) isStateKey_Type() {}

func (*StateKey_MultimapSideInput_) isStateKey_Type() {}

func (*StateKey_BagUserState_) isStateKey_Type() {}

func (m *StateKey) GetType() isStateKey_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *StateKey) GetRunner() *StateKey_Runner {
	if x, ok := m.GetType().(*StateKey_Runner_); ok {
		return x.Runner
	}
	return nil
}

func (m *StateKey) GetMultimapSideInput() *StateKey_MultimapSideInput {
	if x, ok := m.GetType().(*StateKey_MultimapSideInput_); ok {
		return x.MultimapSideInput
	}
	return nil
}

func (m *StateKey) GetBagUserState() *StateKey_BagUserState {
	if x, ok := m.GetType().(*StateKey_BagUserState_); ok {
		return x.BagUserState
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateKey_Runner_)(nil),
		(*StateKey_MultimapSideInput_)(nil),
		(*StateKey_BagUserState_)(nil),
	}
}

type StateKey_Runner struct {
	// (Required) Opaque information supplied by the runner. Used to support
	// remote references.
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateKey_Runner) Reset()         { *m = StateKey_Runner{} }
func (m *StateKey_Runner) String() string { return proto.CompactTextString(m) }
func (*StateKey_Runner) ProtoMessage()    {}
func (*StateKey_Runner) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{37, 0}
}

func (m *StateKey_Runner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateKey_Runner.Unmarshal(m, b)
}
func (m *StateKey_Runner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateKey_Runner.Marshal(b, m, deterministic)
}
func (m *StateKey_Runner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateKey_Runner.Merge(m, src)
}
func (m *StateKey_Runner) XXX_Size() int {
	return xxx_messageInfo_StateKey_Runner.Size(m)
}
func (m *StateKey_Runner) XXX_DiscardUnknown() {
	xxx_messageInfo_StateKey_Runner.DiscardUnknown(m)
}

var xxx_messageInfo_StateKey_Runner proto.InternalMessageInfo

func (m *StateKey_Runner) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type StateKey_MultimapSideInput struct {
	// (Required) The id of the PTransform containing a side input.
	PtransformId string `protobuf:"bytes,1,opt,name=ptransform_id,json=ptransformId,proto3" json:"ptransform_id,omitempty"`
	// (Required) The id of the side input.
	SideInputId string `protobuf:"bytes,2,opt,name=side_input_id,json=sideInputId,proto3" json:"side_input_id,omitempty"`
	// (Required) The window (after mapping the currently executing elements
	// window into the side input windows domain) encoded in a nested context.
	Window []byte `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// (Required) The key encoded in a nested context.
	Key                  []byte   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateKey_MultimapSideInput) Reset()         { *m = StateKey_MultimapSideInput{} }
func (m *StateKey_MultimapSideInput) String() string { return proto.CompactTextString(m) }
func (*StateKey_MultimapSideInput) ProtoMessage()    {}
func (*StateKey_MultimapSideInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{37, 1}
}

func (m *StateKey_MultimapSideInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateKey_MultimapSideInput.Unmarshal(m, b)
}
func (m *StateKey_MultimapSideInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateKey_MultimapSideInput.Marshal(b, m, deterministic)
}
func (m *StateKey_MultimapSideInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateKey_MultimapSideInput.Merge(m, src)
}
func (m *StateKey_MultimapSideInput) XXX_Size() int {
	return xxx_messageInfo_StateKey_MultimapSideInput.Size(m)
}
func (m *StateKey_MultimapSideInput) XXX_DiscardUnknown() {
	xxx_messageInfo_StateKey_MultimapSideInput.DiscardUnknown(m)
}

var xxx_messageInfo_StateKey_MultimapSideInput proto.InternalMessageInfo

func (m *StateKey_MultimapSideInput) GetPtransformId() string {
	if m != nil {
		return m.PtransformId
	}
	return ""
}

func (m *StateKey_MultimapSideInput) GetSideInputId() string {
	if m != nil {
		return m.SideInputId
	}
	return ""
}

func (m *StateKey_MultimapSideInput) GetWindow() []byte {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *StateKey_MultimapSideInput) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type StateKey_BagUserState struct {
	// (Required) The id of the PTransform containing user state.
	PtransformId string `protobuf:"bytes,1,opt,name=ptransform_id,json=ptransformId,proto3" json:"ptransform_id,omitempty"`
	// (Required) The id of the user state.
	UserStateId string `protobuf:"bytes,2,opt,name=user_state_id,json=userStateId,proto3" json:"user_state_id,omitempty"`
	// (Required) The window encoded in a nested context.
	Window []byte `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// (Required) The key of the currently executing element encoded in a
	// nested context.
	Key                  []byte   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateKey_BagUserState) Reset()         { *m = StateKey_BagUserState{} }
func (m *StateKey_BagUserState) String() string { return proto.CompactTextString(m) }
func (*StateKey_BagUserState) ProtoMessage()    {}
func (*StateKey_BagUserState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{37, 2}
}

func (m *StateKey_BagUserState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateKey_BagUserState.Unmarshal(m, b)
}
func (m *StateKey_BagUserState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateKey_BagUserState.Marshal(b, m, deterministic)
}
func (m *StateKey_BagUserState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateKey_BagUserState.Merge(m, src)
}
func (m *StateKey_BagUserState) XXX_Size() int {
	return xxx_messageInfo_StateKey_BagUserState.Size(m)
}
func (m *StateKey_BagUserState) XXX_DiscardUnknown() {
	xxx_messageInfo_StateKey_BagUserState.DiscardUnknown(m)
}

var xxx_messageInfo_StateKey_BagUserState proto.InternalMessageInfo

func (m *StateKey_BagUserState) GetPtransformId() string {
	if m != nil {
		return m.PtransformId
	}
	return ""
}

func (m *StateKey_BagUserState) GetUserStateId() string {
	if m != nil {
		return m.UserStateId
	}
	return ""
}

func (m *StateKey_BagUserState) GetWindow() []byte {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *StateKey_BagUserState) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// A request to get state.
type StateGetRequest struct {
	// (Optional) If specified, signals to the runner that the response
	// should resume from the following continuation token.
	//
	// If unspecified, signals to the runner that the response should start
	// from the beginning of the logical continuable stream.
	ContinuationToken    []byte   `protobuf:"bytes,1,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateGetRequest) Reset()         { *m = StateGetRequest{} }
func (m *StateGetRequest) String() string { return proto.CompactTextString(m) }
func (*StateGetRequest) ProtoMessage()    {}
func (*StateGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{38}
}

func (m *StateGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateGetRequest.Unmarshal(m, b)
}
func (m *StateGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateGetRequest.Marshal(b, m, deterministic)
}
func (m *StateGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateGetRequest.Merge(m, src)
}
func (m *StateGetRequest) XXX_Size() int {
	return xxx_messageInfo_StateGetRequest.Size(m)
}
func (m *StateGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateGetRequest proto.InternalMessageInfo

func (m *StateGetRequest) GetContinuationToken() []byte {
	if m != nil {
		return m.ContinuationToken
	}
	return nil
}

// A response to get state representing a logical byte stream which can be
// continued using the state API.
type StateGetResponse struct {
	// (Optional) If specified, represents a token which can be used with the
	// state API to get the next chunk of this logical byte stream. The end of
	// the logical byte stream is signalled by this field being unset.
	ContinuationToken []byte `protobuf:"bytes,1,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	// Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// concatenated together.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateGetResponse) Reset()         { *m = StateGetResponse{} }
func (m *StateGetResponse) String() string { return proto.CompactTextString(m) }
func (*StateGetResponse) ProtoMessage()    {}
func (*StateGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{39}
}

func (m *StateGetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateGetResponse.Unmarshal(m, b)
}
func (m *StateGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateGetResponse.Marshal(b, m, deterministic)
}
func (m *StateGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateGetResponse.Merge(m, src)
}
func (m *StateGetResponse) XXX_Size() int {
	return xxx_messageInfo_StateGetResponse.Size(m)
}
func (m *StateGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateGetResponse proto.InternalMessageInfo

func (m *StateGetResponse) GetContinuationToken() []byte {
	if m != nil {
		return m.ContinuationToken
	}
	return nil
}

func (m *StateGetResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// A request to append state.
type StateAppendRequest struct {
	// Represents a part of a logical byte stream. Elements within
	// the logical byte stream are encoded in the nested context and
	// multiple append requests are concatenated together.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateAppendRequest) Reset()         { *m = StateAppendRequest{} }
func (m *StateAppendRequest) String() string { return proto.CompactTextString(m) }
func (*StateAppendRequest) ProtoMessage()    {}
func (*StateAppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{40}
}

func (m *StateAppendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateAppendRequest.Unmarshal(m, b)
}
func (m *StateAppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateAppendRequest.Marshal(b, m, deterministic)
}
func (m *StateAppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateAppendRequest.Merge(m, src)
}
func (m *StateAppendRequest) XXX_Size() int {
	return xxx_messageInfo_StateAppendRequest.Size(m)
}
func (m *StateAppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateAppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateAppendRequest proto.InternalMessageInfo

func (m *StateAppendRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// A response to append state.
type StateAppendResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateAppendResponse) Reset()         { *m = StateAppendResponse{} }
func (m *StateAppendResponse) String() string { return proto.CompactTextString(m) }
func (*StateAppendResponse) ProtoMessage()    {}
func (*StateAppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{41}
}

func (m *StateAppendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateAppendResponse.Unmarshal(m, b)
}
func (m *StateAppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateAppendResponse.Marshal(b, m, deterministic)
}
func (m *StateAppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateAppendResponse.Merge(m, src)
}
func (m *StateAppendResponse) XXX_Size() int {
	return xxx_messageInfo_StateAppendResponse.Size(m)
}
func (m *StateAppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateAppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateAppendResponse proto.InternalMessageInfo

// A request to clear state.
type StateClearRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateClearRequest) Reset()         { *m = StateClearRequest{} }
func (m *StateClearRequest) String() string { return proto.CompactTextString(m) }
func (*StateClearRequest) ProtoMessage()    {}
func (*StateClearRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{42}
}

func (m *StateClearRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateClearRequest.Unmarshal(m, b)
}
func (m *StateClearRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateClearRequest.Marshal(b, m, deterministic)
}
func (m *StateClearRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateClearRequest.Merge(m, src)
}
func (m *StateClearRequest) XXX_Size() int {
	return xxx_messageInfo_StateClearRequest.Size(m)
}
func (m *StateClearRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateClearRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateClearRequest proto.InternalMessageInfo

// A response to clear state.
type StateClearResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateClearResponse) Reset()         { *m = StateClearResponse{} }
func (m *StateClearResponse) String() string { return proto.CompactTextString(m) }
func (*StateClearResponse) ProtoMessage()    {}
func (*StateClearResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{43}
}

func (m *StateClearResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateClearResponse.Unmarshal(m, b)
}
func (m *StateClearResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateClearResponse.Marshal(b, m, deterministic)
}
func (m *StateClearResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateClearResponse.Merge(m, src)
}
func (m *StateClearResponse) XXX_Size() int {
	return xxx_messageInfo_StateClearResponse.Size(m)
}
func (m *StateClearResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateClearResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateClearResponse proto.InternalMessageInfo

// A log entry
type LogEntry struct {
	// (Required) The severity of the log statement.
	Severity LogEntry_Severity_Enum `protobuf:"varint,1,opt,name=severity,proto3,enum=org.apache.beam.model.fn_execution.v1.LogEntry_Severity_Enum" json:"severity,omitempty"`
	// (Required) The time at which this log statement occurred.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// (Required) A human readable message.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// (Optional) An optional trace of the functions involved. For example, in
	// Java this can include multiple causes and multiple suppressed exceptions.
	Trace string `protobuf:"bytes,4,opt,name=trace,proto3" json:"trace,omitempty"`
	// (Optional) A reference to the instruction this log statement is associated
	// with.
	InstructionReference string `protobuf:"bytes,5,opt,name=instruction_reference,json=instructionReference,proto3" json:"instruction_reference,omitempty"`
	// (Optional) A reference to the primitive transform this log statement is
	// associated with.
	PrimitiveTransformReference string `protobuf:"bytes,6,opt,name=primitive_transform_reference,json=primitiveTransformReference,proto3" json:"primitive_transform_reference,omitempty"`
	// (Optional) Human-readable name of the function or method being invoked,
	// with optional context such as the class or package name. The format can
	// vary by language. For example:
	//   qual.if.ied.Class.method (Java)
	//   dir/package.func (Go)
	//   module.function (Python)
	//   file.cc:382 (C++)
	LogLocation string `protobuf:"bytes,7,opt,name=log_location,json=logLocation,proto3" json:"log_location,omitempty"`
	// (Optional) The name of the thread this log statement is associated with.
	Thread               string   `protobuf:"bytes,8,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{44}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetSeverity() LogEntry_Severity_Enum {
	if m != nil {
		return m.Severity
	}
	return LogEntry_Severity_UNSPECIFIED
}

func (m *LogEntry) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogEntry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogEntry) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *LogEntry) GetInstructionReference() string {
	if m != nil {
		return m.InstructionReference
	}
	return ""
}

func (m *LogEntry) GetPrimitiveTransformReference() string {
	if m != nil {
		return m.PrimitiveTransformReference
	}
	return ""
}

func (m *LogEntry) GetLogLocation() string {
	if m != nil {
		return m.LogLocation
	}
	return ""
}

func (m *LogEntry) GetThread() string {
	if m != nil {
		return m.Thread
	}
	return ""
}

// A list of log entries, enables buffering and batching of multiple
// log messages using the logging API.
type LogEntry_List struct {
	// (Required) One or or more log messages.
	LogEntries           []*LogEntry `protobuf:"bytes,1,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LogEntry_List) Reset()         { *m = LogEntry_List{} }
func (m *LogEntry_List) String() string { return proto.CompactTextString(m) }
func (*LogEntry_List) ProtoMessage()    {}
func (*LogEntry_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{44, 0}
}

func (m *LogEntry_List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry_List.Unmarshal(m, b)
}
func (m *LogEntry_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry_List.Marshal(b, m, deterministic)
}
func (m *LogEntry_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry_List.Merge(m, src)
}
func (m *LogEntry_List) XXX_Size() int {
	return xxx_messageInfo_LogEntry_List.Size(m)
}
func (m *LogEntry_List) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry_List.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry_List proto.InternalMessageInfo

func (m *LogEntry_List) GetLogEntries() []*LogEntry {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

// The severity of the event described in a log entry, expressed as one of the
// severity levels listed below. For your reference, the levels are
// assigned the listed numeric values. The effect of using numeric values
// other than those listed is undefined.
//
// If you are writing log entries, you should map other severity encodings to
// one of these standard levels. For example, you might map all of
// Java's FINE, FINER, and FINEST levels to `Severity.DEBUG`.
//
// This list is intentionally not comprehensive; the intent is to provide a
// common set of "good enough" severity levels so that logging front ends
// can provide filtering and searching across log types. Users of the API are
// free not to use all severity levels in their log messages.
type LogEntry_Severity struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry_Severity) Reset()         { *m = LogEntry_Severity{} }
func (m *LogEntry_Severity) String() string { return proto.CompactTextString(m) }
func (*LogEntry_Severity) ProtoMessage()    {}
func (*LogEntry_Severity) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{44, 1}
}

func (m *LogEntry_Severity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry_Severity.Unmarshal(m, b)
}
func (m *LogEntry_Severity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry_Severity.Marshal(b, m, deterministic)
}
func (m *LogEntry_Severity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry_Severity.Merge(m, src)
}
func (m *LogEntry_Severity) XXX_Size() int {
	return xxx_messageInfo_LogEntry_Severity.Size(m)
}
func (m *LogEntry_Severity) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry_Severity.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry_Severity proto.InternalMessageInfo

type LogControl struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogControl) Reset()         { *m = LogControl{} }
func (m *LogControl) String() string { return proto.CompactTextString(m) }
func (*LogControl) ProtoMessage()    {}
func (*LogControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{45}
}

func (m *LogControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogControl.Unmarshal(m, b)
}
func (m *LogControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogControl.Marshal(b, m, deterministic)
}
func (m *LogControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogControl.Merge(m, src)
}
func (m *LogControl) XXX_Size() int {
	return xxx_messageInfo_LogControl.Size(m)
}
func (m *LogControl) XXX_DiscardUnknown() {
	xxx_messageInfo_LogControl.DiscardUnknown(m)
}

var xxx_messageInfo_LogControl proto.InternalMessageInfo

type NotifyRunnerAvailableRequest struct {
	WorkerId             string                            `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ControlEndpoint      *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,2,opt,name=control_endpoint,json=controlEndpoint,proto3" json:"control_endpoint,omitempty"`
	LoggingEndpoint      *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,3,opt,name=logging_endpoint,json=loggingEndpoint,proto3" json:"logging_endpoint,omitempty"`
	ArtifactEndpoint     *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,4,opt,name=artifact_endpoint,json=artifactEndpoint,proto3" json:"artifact_endpoint,omitempty"`
	ProvisionEndpoint    *pipeline_v1.ApiServiceDescriptor `protobuf:"bytes,5,opt,name=provision_endpoint,json=provisionEndpoint,proto3" json:"provision_endpoint,omitempty"`
	Params               map[string]string                 `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *NotifyRunnerAvailableRequest) Reset()         { *m = NotifyRunnerAvailableRequest{} }
func (m *NotifyRunnerAvailableRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyRunnerAvailableRequest) ProtoMessage()    {}
func (*NotifyRunnerAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{46}
}

func (m *NotifyRunnerAvailableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyRunnerAvailableRequest.Unmarshal(m, b)
}
func (m *NotifyRunnerAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyRunnerAvailableRequest.Marshal(b, m, deterministic)
}
func (m *NotifyRunnerAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRunnerAvailableRequest.Merge(m, src)
}
func (m *NotifyRunnerAvailableRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyRunnerAvailableRequest.Size(m)
}
func (m *NotifyRunnerAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRunnerAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRunnerAvailableRequest proto.InternalMessageInfo

func (m *NotifyRunnerAvailableRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *NotifyRunnerAvailableRequest) GetControlEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.ControlEndpoint
	}
	return nil
}

func (m *NotifyRunnerAvailableRequest) GetLoggingEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.LoggingEndpoint
	}
	return nil
}

func (m *NotifyRunnerAvailableRequest) GetArtifactEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.ArtifactEndpoint
	}
	return nil
}

func (m *NotifyRunnerAvailableRequest) GetProvisionEndpoint() *pipeline_v1.ApiServiceDescriptor {
	if m != nil {
		return m.ProvisionEndpoint
	}
	return nil
}

func (m *NotifyRunnerAvailableRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type NotifyRunnerAvailableResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRunnerAvailableResponse) Reset()         { *m = NotifyRunnerAvailableResponse{} }
func (m *NotifyRunnerAvailableResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyRunnerAvailableResponse) ProtoMessage()    {}
func (*NotifyRunnerAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d954c03a4758710, []int{47}
}

func (m *NotifyRunnerAvailableResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyRunnerAvailableResponse.Unmarshal(m, b)
}
func (m *NotifyRunnerAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyRunnerAvailableResponse.Marshal(b, m, deterministic)
}
func (m *NotifyRunnerAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRunnerAvailableResponse.Merge(m, src)
}
func (m *NotifyRunnerAvailableResponse) XXX_Size() int {
	return xxx_messageInfo_NotifyRunnerAvailableResponse.Size(m)
}
func (m *NotifyRunnerAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRunnerAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRunnerAvailableResponse proto.InternalMessageInfo

func (m *NotifyRunnerAvailableResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

var E_LabelProps = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*MonitoringInfoLabelProps)(nil),
	Field:         127337796,
	Name:          "org.apache.beam.model.fn_execution.v1.label_props",
	Tag:           "bytes,127337796,opt,name=label_props",
	Filename:      "beam_fn_api.proto",
}

var E_MonitoringInfoSpec = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*MonitoringInfoSpec)(nil),
	Field:         207174266,
	Name:          "org.apache.beam.model.fn_execution.v1.monitoring_info_spec",
	Tag:           "bytes,207174266,opt,name=monitoring_info_spec",
	Filename:      "beam_fn_api.proto",
}

func init() {
	proto.RegisterEnum("org.apache.beam.model.fn_execution.v1.MonitoringInfoSpecs_Enum", MonitoringInfoSpecs_Enum_name, MonitoringInfoSpecs_Enum_value)
	proto.RegisterEnum("org.apache.beam.model.fn_execution.v1.MonitoringInfo_MonitoringInfoLabels", MonitoringInfo_MonitoringInfoLabels_name, MonitoringInfo_MonitoringInfoLabels_value)
	proto.RegisterEnum("org.apache.beam.model.fn_execution.v1.MonitoringInfoUrns_Enum", MonitoringInfoUrns_Enum_name, MonitoringInfoUrns_Enum_value)
	proto.RegisterEnum("org.apache.beam.model.fn_execution.v1.MonitoringInfoTypeUrns_Enum", MonitoringInfoTypeUrns_Enum_name, MonitoringInfoTypeUrns_Enum_value)
	proto.RegisterEnum("org.apache.beam.model.fn_execution.v1.LogEntry_Severity_Enum", LogEntry_Severity_Enum_name, LogEntry_Severity_Enum_value)
	proto.RegisterType((*Target)(nil), "org.apache.beam.model.fn_execution.v1.Target")
	proto.RegisterType((*Target_List)(nil), "org.apache.beam.model.fn_execution.v1.Target.List")
	proto.RegisterType((*RemoteGrpcPort)(nil), "org.apache.beam.model.fn_execution.v1.RemoteGrpcPort")
	proto.RegisterType((*InstructionRequest)(nil), "org.apache.beam.model.fn_execution.v1.InstructionRequest")
	proto.RegisterType((*InstructionResponse)(nil), "org.apache.beam.model.fn_execution.v1.InstructionResponse")
	proto.RegisterType((*RegisterRequest)(nil), "org.apache.beam.model.fn_execution.v1.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "org.apache.beam.model.fn_execution.v1.RegisterResponse")
	proto.RegisterType((*ProcessBundleDescriptor)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor")
	proto.RegisterMapType((map[string]*pipeline_v1.Coder)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.CodersEntry")
	proto.RegisterMapType((map[string]*pipeline_v1.Environment)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.EnvironmentsEntry")
	proto.RegisterMapType((map[string]*pipeline_v1.PCollection)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.PcollectionsEntry")
	proto.RegisterMapType((map[string]*pipeline_v1.PTransform)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.TransformsEntry")
	proto.RegisterMapType((map[string]*pipeline_v1.WindowingStrategy)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleDescriptor.WindowingStrategiesEntry")
	proto.RegisterType((*BundleApplication)(nil), "org.apache.beam.model.fn_execution.v1.BundleApplication")
	proto.RegisterMapType((map[string]*timestamp.Timestamp)(nil), "org.apache.beam.model.fn_execution.v1.BundleApplication.OutputWatermarksEntry")
	proto.RegisterType((*BundleApplication_Backlog)(nil), "org.apache.beam.model.fn_execution.v1.BundleApplication.Backlog")
	proto.RegisterType((*DelayedBundleApplication)(nil), "org.apache.beam.model.fn_execution.v1.DelayedBundleApplication")
	proto.RegisterType((*ProcessBundleRequest)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleRequest")
	proto.RegisterType((*ProcessBundleResponse)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleResponse")
	proto.RegisterType((*ProcessBundleProgressRequest)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleProgressRequest")
	proto.RegisterType((*MonitoringInfoSpec)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfoSpec")
	proto.RegisterType((*Annotation)(nil), "org.apache.beam.model.fn_execution.v1.Annotation")
	proto.RegisterType((*MonitoringInfoSpecs)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfoSpecs")
	proto.RegisterType((*MonitoringInfoLabelProps)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfoLabelProps")
	proto.RegisterType((*MonitoringInfo)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfo")
	proto.RegisterMapType((map[string]string)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfo.LabelsEntry")
	proto.RegisterType((*MonitoringInfoUrns)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfoUrns")
	proto.RegisterType((*MonitoringInfoTypeUrns)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringInfoTypeUrns")
	proto.RegisterType((*Metric)(nil), "org.apache.beam.model.fn_execution.v1.Metric")
	proto.RegisterType((*CounterData)(nil), "org.apache.beam.model.fn_execution.v1.CounterData")
	proto.RegisterType((*ExtremaData)(nil), "org.apache.beam.model.fn_execution.v1.ExtremaData")
	proto.RegisterType((*IntExtremaData)(nil), "org.apache.beam.model.fn_execution.v1.IntExtremaData")
	proto.RegisterType((*DoubleExtremaData)(nil), "org.apache.beam.model.fn_execution.v1.DoubleExtremaData")
	proto.RegisterType((*DistributionData)(nil), "org.apache.beam.model.fn_execution.v1.DistributionData")
	proto.RegisterType((*IntDistributionData)(nil), "org.apache.beam.model.fn_execution.v1.IntDistributionData")
	proto.RegisterType((*DoubleDistributionData)(nil), "org.apache.beam.model.fn_execution.v1.DoubleDistributionData")
	proto.RegisterType((*MonitoringTableData)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringTableData")
	proto.RegisterType((*MonitoringTableData_MonitoringColumnValue)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringTableData.MonitoringColumnValue")
	proto.RegisterType((*MonitoringTableData_MonitoringRow)(nil), "org.apache.beam.model.fn_execution.v1.MonitoringTableData.MonitoringRow")
	proto.RegisterType((*Metrics)(nil), "org.apache.beam.model.fn_execution.v1.Metrics")
	proto.RegisterMapType((map[string]*Metrics_PTransform)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PtransformsEntry")
	proto.RegisterType((*Metrics_PTransform)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform")
	proto.RegisterMapType((map[string]int64)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.WatermarksEntry")
	proto.RegisterType((*Metrics_PTransform_Measured)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.Measured")
	proto.RegisterMapType((map[string]int64)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.Measured.InputElementCountsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.Measured.OutputElementCountsEntry")
	proto.RegisterType((*Metrics_PTransform_ProcessedElements)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.ProcessedElements")
	proto.RegisterType((*Metrics_PTransform_ActiveElements)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.ActiveElements")
	proto.RegisterMapType((map[string]int64)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.PTransform.ActiveElements.OutputElementsRemainingEntry")
	proto.RegisterType((*Metrics_User)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.User")
	proto.RegisterType((*Metrics_User_MetricName)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.User.MetricName")
	proto.RegisterType((*Metrics_User_CounterData)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.User.CounterData")
	proto.RegisterType((*Metrics_User_DistributionData)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.User.DistributionData")
	proto.RegisterType((*Metrics_User_GaugeData)(nil), "org.apache.beam.model.fn_execution.v1.Metrics.User.GaugeData")
	proto.RegisterType((*ProcessBundleProgressResponse)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleProgressResponse")
	proto.RegisterType((*ProcessBundleSplitRequest)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.BacklogRemainingEntry")
	proto.RegisterMapType((map[string]*ProcessBundleSplitRequest_DesiredSplit)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplitsEntry")
	proto.RegisterType((*ProcessBundleSplitRequest_DesiredSplit)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitRequest.DesiredSplit")
	proto.RegisterType((*ProcessBundleSplitResponse)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse")
	proto.RegisterType((*ProcessBundleSplitResponse_ChannelSplit)(nil), "org.apache.beam.model.fn_execution.v1.ProcessBundleSplitResponse.ChannelSplit")
	proto.RegisterType((*FinalizeBundleRequest)(nil), "org.apache.beam.model.fn_execution.v1.FinalizeBundleRequest")
	proto.RegisterType((*FinalizeBundleResponse)(nil), "org.apache.beam.model.fn_execution.v1.FinalizeBundleResponse")
	proto.RegisterType((*Elements)(nil), "org.apache.beam.model.fn_execution.v1.Elements")
	proto.RegisterType((*Elements_Data)(nil), "org.apache.beam.model.fn_execution.v1.Elements.Data")
	proto.RegisterType((*StateRequest)(nil), "org.apache.beam.model.fn_execution.v1.StateRequest")
	proto.RegisterType((*StateResponse)(nil), "org.apache.beam.model.fn_execution.v1.StateResponse")
	proto.RegisterType((*StateKey)(nil), "org.apache.beam.model.fn_execution.v1.StateKey")
	proto.RegisterType((*StateKey_Runner)(nil), "org.apache.beam.model.fn_execution.v1.StateKey.Runner")
	proto.RegisterType((*StateKey_MultimapSideInput)(nil), "org.apache.beam.model.fn_execution.v1.StateKey.MultimapSideInput")
	proto.RegisterType((*StateKey_BagUserState)(nil), "org.apache.beam.model.fn_execution.v1.StateKey.BagUserState")
	proto.RegisterType((*StateGetRequest)(nil), "org.apache.beam.model.fn_execution.v1.StateGetRequest")
	proto.RegisterType((*StateGetResponse)(nil), "org.apache.beam.model.fn_execution.v1.StateGetResponse")
	proto.RegisterType((*StateAppendRequest)(nil), "org.apache.beam.model.fn_execution.v1.StateAppendRequest")
	proto.RegisterType((*StateAppendResponse)(nil), "org.apache.beam.model.fn_execution.v1.StateAppendResponse")
	proto.RegisterType((*StateClearRequest)(nil), "org.apache.beam.model.fn_execution.v1.StateClearRequest")
	proto.RegisterType((*StateClearResponse)(nil), "org.apache.beam.model.fn_execution.v1.StateClearResponse")
	proto.RegisterType((*LogEntry)(nil), "org.apache.beam.model.fn_execution.v1.LogEntry")
	proto.RegisterType((*LogEntry_List)(nil), "org.apache.beam.model.fn_execution.v1.LogEntry.List")
	proto.RegisterType((*LogEntry_Severity)(nil), "org.apache.beam.model.fn_execution.v1.LogEntry.Severity")
	proto.RegisterType((*LogControl)(nil), "org.apache.beam.model.fn_execution.v1.LogControl")
	proto.RegisterType((*NotifyRunnerAvailableRequest)(nil), "org.apache.beam.model.fn_execution.v1.NotifyRunnerAvailableRequest")
	proto.RegisterMapType((map[string]string)(nil), "org.apache.beam.model.fn_execution.v1.NotifyRunnerAvailableRequest.ParamsEntry")
	proto.RegisterType((*NotifyRunnerAvailableResponse)(nil), "org.apache.beam.model.fn_execution.v1.NotifyRunnerAvailableResponse")
	proto.RegisterExtension(E_LabelProps)
	proto.RegisterExtension(E_MonitoringInfoSpec)
}

func init() { proto.RegisterFile("beam_fn_api.proto", fileDescriptor_6d954c03a4758710) }

var fileDescriptor_6d954c03a4758710 = []byte{
	// 4585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7b, 0x5d, 0x6c, 0x24, 0xd9,
	0x55, 0xbf, 0xab, 0xbf, 0xec, 0x3e, 0xdd, 0x6e, 0xb7, 0xaf, 0xed, 0x71, 0x6f, 0x65, 0xf6, 0x9f,
	0x9e, 0xda, 0xe4, 0xcf, 0x3c, 0xb0, 0x3d, 0x3b, 0x5e, 0xef, 0xec, 0x8c, 0xb3, 0xbb, 0x89, 0xdd,
	0xee, 0x19, 0xf7, 0xae, 0xdd, 0x6e, 0xaa, 0xdb, 0x3b, 0xbb, 0x13, 0x91, 0xa2, 0xdc, 0x7d, 0xbb,
	0xa7, 0x98, 0xee, 0xaa, 0x4a, 0x55, 0xb5, 0x3d, 0x5e, 0x22, 0x10, 0x44, 0x5a, 0x20, 0x02, 0x2d,
	0x08, 0x29, 0x44, 0xbc, 0x00, 0x0b, 0xd2, 0x4a, 0x41, 0x82, 0x17, 0x44, 0x04, 0x48, 0xa0, 0x44,
	0x3c, 0x04, 0x09, 0x81, 0x08, 0x48, 0x48, 0x24, 0x88, 0x3c, 0x6c, 0x20, 0x10, 0x78, 0x83, 0x97,
	0x3c, 0xa1, 0xfb, 0x51, 0xd5, 0xb7, 0xfa, 0xc3, 0xee, 0x6e, 0x3b, 0xfb, 0x56, 0xf7, 0xdc, 0x3a,
	0xe7, 0x77, 0xee, 0xa9, 0x73, 0xcf, 0x39, 0xf7, 0xa3, 0x60, 0xf9, 0x18, 0xeb, 0x5d, 0xad, 0x65,
	0x6a, 0xba, 0x6d, 0x14, 0x6c, 0xc7, 0xf2, 0x2c, 0xf4, 0x49, 0xcb, 0x69, 0x17, 0x74, 0x5b, 0x6f,
	0x3c, 0xc6, 0x05, 0xd2, 0x5b, 0xe8, 0x5a, 0x4d, 0xdc, 0x29, 0xb4, 0x4c, 0x0d, 0x3f, 0xc5, 0x8d,
	0x9e, 0x67, 0x58, 0x66, 0xe1, 0xe4, 0xb6, 0xbc, 0x46, 0x39, 0x9d, 0x9e, 0x69, 0x62, 0xa7, 0xcf,
	0x2d, 0x2f, 0x61, 0xb3, 0x69, 0x5b, 0x86, 0xe9, 0xb9, 0x9c, 0x90, 0x6f, 0x5b, 0x56, 0xbb, 0x83,
	0x6f, 0xd1, 0xd6, 0x71, 0xaf, 0x75, 0xab, 0x89, 0xdd, 0x86, 0x63, 0xd8, 0x9e, 0xe5, 0xf0, 0x37,
	0x3e, 0x3e, 0xf8, 0x86, 0x67, 0x74, 0xb1, 0xeb, 0xe9, 0x5d, 0x9b, 0xbf, 0xf0, 0xff, 0x06, 0x5f,
	0x38, 0x75, 0x74, 0xdb, 0xc6, 0x0e, 0x87, 0x50, 0xfe, 0x48, 0x82, 0x44, 0x5d, 0x77, 0xda, 0xd8,
	0x43, 0x3b, 0xf0, 0xac, 0xed, 0x18, 0x5d, 0xc3, 0x33, 0x4e, 0xb0, 0xe6, 0x39, 0xba, 0xe9, 0xb6,
	0x2c, 0xa7, 0xab, 0x39, 0xb8, 0x85, 0x1d, 0x6c, 0x36, 0x70, 0x4e, 0xca, 0x4b, 0x37, 0x93, 0xea,
	0xc7, 0x82, 0x97, 0xea, 0xfe, 0x3b, 0xaa, 0xff, 0x0a, 0x42, 0x10, 0x33, 0xf5, 0x2e, 0xce, 0x45,
	0xe8, 0xab, 0xf4, 0x59, 0x3e, 0x80, 0xd8, 0xbe, 0xe1, 0x7a, 0xa8, 0x04, 0x09, 0x8f, 0x22, 0xe5,
	0xa4, 0x7c, 0xf4, 0x66, 0x6a, 0xe3, 0xf9, 0xc2, 0x44, 0xd6, 0x2a, 0x30, 0xf5, 0x54, 0xce, 0xac,
	0xfc, 0x96, 0x04, 0x19, 0x15, 0x77, 0x2d, 0x0f, 0x3f, 0x70, 0xec, 0x46, 0xd5, 0x72, 0x3c, 0xd4,
	0x85, 0x6b, 0xba, 0x6d, 0x68, 0x2e, 0x76, 0x4e, 0x8c, 0x06, 0xd6, 0xfa, 0x56, 0xa2, 0x2a, 0xa7,
	0x36, 0x5e, 0x1e, 0x83, 0x64, 0x1b, 0x36, 0xee, 0x18, 0x26, 0x26, 0x28, 0xdb, 0xb6, 0x51, 0x63,
	0xfc, 0xbb, 0x01, 0xbb, 0xba, 0xaa, 0x8f, 0xa0, 0xa2, 0x67, 0x60, 0xa1, 0x61, 0x35, 0xb1, 0xa3,
	0x19, 0x4d, 0x3e, 0xd0, 0x79, 0xda, 0x2e, 0x37, 0x95, 0xef, 0xc5, 0x00, 0x95, 0x4d, 0xd7, 0x73,
	0x7a, 0x0d, 0xa2, 0xbe, 0x8a, 0x3f, 0xdf, 0xc3, 0xae, 0x87, 0x3e, 0x09, 0x19, 0xa3, 0x4f, 0x25,
	0x7c, 0xcc, 0x96, 0x8b, 0x02, 0xb5, 0xdc, 0x44, 0x47, 0xb0, 0xe0, 0xe0, 0xb6, 0xe1, 0x7a, 0xd8,
	0xc9, 0x7d, 0x7f, 0x9e, 0xaa, 0x7e, 0x67, 0x42, 0x23, 0xa9, 0x9c, 0x8f, 0x23, 0xee, 0xcd, 0xa9,
	0x81, 0x28, 0x84, 0x21, 0x63, 0x3b, 0x56, 0x03, 0xbb, 0xae, 0x76, 0xdc, 0x33, 0x9b, 0x1d, 0x9c,
	0xfb, 0x0f, 0x26, 0xfc, 0x53, 0x13, 0x0a, 0xaf, 0x32, 0xee, 0x1d, 0xca, 0xdc, 0x47, 0x58, 0xb4,
	0x45, 0x3a, 0xfa, 0x59, 0x58, 0x0f, 0xc3, 0x68, 0xb6, 0x63, 0xb5, 0x1d, 0xec, 0xba, 0xb9, 0xff,
	0x64, 0x78, 0xc5, 0x59, 0xf0, 0xaa, 0x5c, 0x48, 0x1f, 0x77, 0xcd, 0x1e, 0xd5, 0x8f, 0x7a, 0xb0,
	0x3a, 0x80, 0xef, 0xda, 0x1d, 0xc3, 0xcb, 0xfd, 0x80, 0x81, 0x7f, 0x66, 0x16, 0xf0, 0x1a, 0x91,
	0xd0, 0x47, 0x46, 0xf6, 0x50, 0x27, 0x7a, 0x0c, 0x4b, 0x2d, 0xc3, 0xd4, 0x3b, 0xc6, 0x3b, 0xd8,
	0x37, 0xef, 0x7f, 0x31, 0xc4, 0x57, 0x26, 0x44, 0xbc, 0xcf, 0xd9, 0x07, 0xed, 0x9b, 0x69, 0x85,
	0x3a, 0x76, 0x92, 0x30, 0xef, 0xb0, 0x4e, 0xe5, 0x17, 0xe2, 0xb0, 0x12, 0xf2, 0x33, 0xd7, 0xb6,
	0x4c, 0x17, 0x4f, 0xea, 0x68, 0xab, 0x10, 0xc7, 0x8e, 0x63, 0x39, 0xdc, 0x7d, 0x59, 0x03, 0xbd,
	0x39, 0xec, 0x7e, 0x2f, 0x4f, 0xed, 0x7e, 0x4c, 0x91, 0x90, 0xff, 0xb5, 0xc6, 0xf9, 0xdf, 0x2b,
	0xb3, 0xf9, 0x5f, 0x00, 0x31, 0xe0, 0x80, 0x3f, 0x77, 0xa1, 0x03, 0xee, 0x5e, 0xce, 0x01, 0x03,
	0xe0, 0x31, 0x1e, 0x78, 0x72, 0xbe, 0x07, 0x6e, 0x5f, 0xc2, 0x03, 0x03, 0xe8, 0x51, 0x2e, 0x68,
	0x8c, 0x75, 0xc1, 0x57, 0x67, 0x74, 0xc1, 0x00, 0x6e, 0xd0, 0x07, 0x81, 0xf8, 0x08, 0xeb, 0x55,
	0x7e, 0x55, 0x82, 0xa5, 0x81, 0xb8, 0x83, 0xde, 0x81, 0x67, 0x06, 0x4c, 0x10, 0x8a, 0xc6, 0x24,
	0xee, 0xbf, 0x36, 0x8b, 0x19, 0x84, 0xa0, 0xbc, 0x6e, 0x8f, 0xee, 0x50, 0x10, 0x64, 0x07, 0xfd,
	0x50, 0xf9, 0x3d, 0x80, 0xf5, 0x31, 0x82, 0x50, 0x06, 0x22, 0xc1, 0x04, 0x89, 0x18, 0x4d, 0x64,
	0x02, 0x04, 0x69, 0xcf, 0xcd, 0x45, 0xa8, 0xb2, 0x95, 0xcb, 0x29, 0x5b, 0x08, 0x72, 0xa4, 0x5b,
	0x32, 0x3d, 0xe7, 0x4c, 0x15, 0x10, 0x90, 0x07, 0x69, 0xbb, 0x61, 0x75, 0x3a, 0x98, 0x4e, 0x4b,
	0x37, 0x17, 0xa5, 0x88, 0xd5, 0x4b, 0x22, 0x56, 0x05, 0x91, 0x0c, 0x33, 0x84, 0x82, 0xbe, 0x24,
	0xc1, 0xea, 0xa9, 0x61, 0x36, 0xad, 0x53, 0xc3, 0x6c, 0x6b, 0xae, 0xe7, 0xe8, 0x1e, 0x6e, 0x1b,
	0xd8, 0xcd, 0xc5, 0x28, 0xfc, 0xc3, 0x4b, 0xc2, 0x3f, 0xf4, 0x45, 0xd7, 0x02, 0xc9, 0x4c, 0x8b,
	0x95, 0xd3, 0xe1, 0x1e, 0x74, 0x0c, 0x09, 0x9a, 0x3a, 0xdd, 0x5c, 0x9c, 0xa2, 0xbf, 0x7e, 0x49,
	0xf4, 0x22, 0x15, 0xc6, 0x00, 0xb9, 0x64, 0x62, 0x66, 0x6c, 0x9e, 0x18, 0x8e, 0x65, 0x76, 0xb1,
	0xe9, 0xb9, 0xb9, 0xc4, 0x95, 0x98, 0xb9, 0x24, 0x88, 0xe4, 0x66, 0x16, 0x51, 0xd0, 0x53, 0xb8,
	0xee, 0x7a, 0xba, 0x87, 0xb5, 0x31, 0x95, 0xc9, 0xfc, 0xe5, 0x2a, 0x93, 0x67, 0xa8, 0xf0, 0x51,
	0x5d, 0x72, 0x07, 0x96, 0x06, 0xbc, 0x0e, 0x65, 0x21, 0xfa, 0x04, 0x9f, 0x71, 0x57, 0x27, 0x8f,
	0xa8, 0x08, 0xf1, 0x13, 0xbd, 0xd3, 0x63, 0x95, 0xda, 0xf8, 0x5a, 0x4c, 0xd4, 0xa3, 0xda, 0xaf,
	0xf7, 0x18, 0xef, 0x56, 0xe4, 0xae, 0x24, 0x5b, 0xb0, 0x3c, 0xe4, 0x71, 0x23, 0xf0, 0x76, 0xc3,
	0x78, 0x85, 0x49, 0xf0, 0x8a, 0x81, 0x58, 0x11, 0xf0, 0x0b, 0x90, 0x1b, 0xe7, 0x63, 0x23, 0x70,
	0x5f, 0x0f, 0xe3, 0x6e, 0x4e, 0x80, 0x3b, 0x28, 0xfd, 0x4c, 0x44, 0x6f, 0x40, 0x4a, 0xf0, 0xb1,
	0x11, 0x80, 0xaf, 0x85, 0x01, 0x6f, 0x4e, 0x00, 0x48, 0x05, 0x0e, 0xd8, 0x74, 0xc8, 0xbd, 0xae,
	0xc6, 0xa6, 0x82, 0x58, 0x01, 0x50, 0xf9, 0x66, 0x1c, 0x96, 0x99, 0x87, 0x6f, 0xdb, 0x76, 0xc7,
	0x68, 0xe8, 0xc4, 0xe8, 0xe8, 0x39, 0x58, 0xb4, 0xfb, 0xeb, 0x80, 0x20, 0x54, 0xa6, 0xfb, 0xc4,
	0x72, 0x93, 0x14, 0xc3, 0x86, 0x69, 0xf7, 0x3c, 0xa1, 0x18, 0xa6, 0xed, 0x72, 0x13, 0xe5, 0x60,
	0x1e, 0x77, 0x30, 0xc1, 0xca, 0x45, 0xf3, 0xd2, 0xcd, 0xb4, 0xea, 0x37, 0xd1, 0xcf, 0xc0, 0xb2,
	0xd5, 0xf3, 0x08, 0xd7, 0xa9, 0xee, 0x61, 0xa7, 0xab, 0x3b, 0x4f, 0xfc, 0xf8, 0x33, 0x69, 0xc0,
	0x1d, 0x52, 0xb7, 0x70, 0x48, 0x25, 0x3e, 0x0c, 0x04, 0xb2, 0x59, 0x99, 0xb5, 0x06, 0xc8, 0xe8,
	0x11, 0xcc, 0x1f, 0xeb, 0x8d, 0x27, 0x1d, 0xab, 0x9d, 0x8b, 0x4f, 0x55, 0x19, 0x0e, 0x43, 0xee,
	0x30, 0x39, 0xaa, 0x2f, 0x10, 0x55, 0x01, 0x0c, 0x57, 0x3b, 0xb6, 0x7a, 0x66, 0x13, 0x37, 0x73,
	0x89, 0xbc, 0x74, 0x33, 0xb3, 0x71, 0x7b, 0x82, 0xef, 0x52, 0x76, 0x77, 0x18, 0x4f, 0xa1, 0x64,
	0xf6, 0xba, 0x6a, 0xd2, 0xf0, 0xdb, 0xe8, 0xa7, 0x20, 0xdb, 0xb5, 0x4c, 0xc3, 0xb3, 0x1c, 0x12,
	0xae, 0x0d, 0xb3, 0x65, 0xb9, 0xb9, 0x79, 0x6a, 0xa9, 0x97, 0x26, 0x54, 0xfb, 0x20, 0x60, 0x2f,
	0x9b, 0x2d, 0x4b, 0x5d, 0xea, 0x86, 0xda, 0xae, 0xac, 0xc1, 0xda, 0x48, 0xd3, 0x8d, 0xf0, 0xb8,
	0x17, 0xc2, 0x1e, 0x27, 0x17, 0xd8, 0xea, 0xb2, 0xe0, 0xaf, 0x2e, 0x0b, 0x75, 0x7f, 0xf9, 0x29,
	0xba, 0xf3, 0x13, 0x98, 0xe7, 0x86, 0x42, 0xd7, 0x21, 0x69, 0xeb, 0x8e, 0x67, 0x10, 0xdd, 0xa8,
	0xe0, 0xb4, 0xda, 0x27, 0xa0, 0x75, 0x88, 0x1f, 0x9f, 0x79, 0xd8, 0x65, 0xd5, 0x67, 0x7a, 0x6f,
	0x4e, 0x65, 0x6d, 0x94, 0xa7, 0x66, 0xed, 0x99, 0x4f, 0x4c, 0xeb, 0xd4, 0x64, 0xd5, 0xe3, 0xc2,
	0xde, 0x1c, 0x31, 0xd3, 0x11, 0xa3, 0xed, 0xcc, 0x73, 0xcd, 0x94, 0xbf, 0x91, 0x20, 0xb7, 0x8b,
	0x3b, 0xfa, 0x19, 0x6e, 0x0e, 0x7b, 0x74, 0x1d, 0x72, 0xbc, 0x82, 0xc6, 0xcd, 0xbe, 0x91, 0x34,
	0xb2, 0x68, 0xe6, 0x4b, 0xc5, 0xf3, 0x86, 0x74, 0x2d, 0xe0, 0x2d, 0xf9, 0xac, 0xa4, 0x13, 0x3d,
	0x82, 0x94, 0xde, 0x07, 0xe1, 0xb6, 0xb9, 0x3b, 0xab, 0x53, 0xa9, 0xa2, 0x30, 0xe5, 0x97, 0x24,
	0x58, 0x1d, 0xb5, 0xfc, 0x42, 0x07, 0xf0, 0xdc, 0xd8, 0x42, 0x6b, 0x68, 0xcd, 0x9e, 0x1f, 0x53,
	0x32, 0xf5, 0x17, 0xee, 0x37, 0x20, 0xdd, 0x20, 0xaa, 0x6a, 0x9e, 0xf5, 0x04, 0x9b, 0xac, 0xfa,
	0x49, 0xab, 0x29, 0x4a, 0xab, 0x53, 0x92, 0xf2, 0xdd, 0x08, 0xac, 0x8d, 0xac, 0xc4, 0xd1, 0x1e,
	0xcc, 0x77, 0xb1, 0xe7, 0x18, 0x0d, 0x97, 0x5b, 0xb1, 0x30, 0xa9, 0x6b, 0x32, 0x2e, 0xd5, 0x67,
	0x27, 0x4b, 0x05, 0x07, 0xbb, 0x46, 0xb3, 0xa7, 0x77, 0x34, 0xc7, 0xb2, 0x3c, 0xbf, 0x0c, 0xfb,
	0xf4, 0x84, 0x02, 0xc7, 0x7d, 0x79, 0x75, 0xd1, 0x17, 0xab, 0x12, 0xa9, 0x23, 0x67, 0x55, 0xf4,
	0x2a, 0x67, 0x15, 0x7a, 0x11, 0xd6, 0x88, 0xbb, 0x18, 0x0e, 0x76, 0x35, 0x5e, 0x43, 0x33, 0xf7,
	0x88, 0x11, 0xe7, 0x55, 0x57, 0xfd, 0xce, 0xfb, 0x42, 0x9f, 0x52, 0x83, 0xeb, 0xe7, 0xad, 0x7d,
	0x89, 0x50, 0x71, 0x79, 0x37, 0xf8, 0x99, 0x57, 0x0d, 0x71, 0x49, 0xc8, 0xfb, 0x94, 0xbf, 0x94,
	0x00, 0x85, 0xb5, 0xad, 0xd9, 0xb8, 0x41, 0x66, 0x77, 0xcf, 0x31, 0xfd, 0xd9, 0xdd, 0x73, 0x4c,
	0x12, 0xca, 0xbd, 0x33, 0x1b, 0x6b, 0x84, 0xcc, 0x43, 0x39, 0x69, 0x1f, 0x39, 0x26, 0xfa, 0x31,
	0x58, 0xe2, 0x0a, 0x37, 0xb5, 0x8e, 0x7e, 0x8c, 0x3b, 0xcc, 0x5c, 0x49, 0x35, 0xe3, 0x93, 0xf7,
	0x29, 0x15, 0xd5, 0x20, 0xa5, 0x9b, 0xa6, 0xe5, 0xe9, 0xac, 0xa4, 0x65, 0x31, 0xfd, 0xf6, 0x84,
	0x36, 0xdd, 0x0e, 0x38, 0x55, 0x51, 0x8a, 0xb2, 0x09, 0xd0, 0xef, 0x1a, 0x11, 0x96, 0x56, 0xc5,
	0xb0, 0x94, 0xe4, 0xa1, 0x47, 0xf9, 0xb7, 0x05, 0x58, 0x19, 0x1e, 0xb7, 0xab, 0xfc, 0xed, 0x02,
	0xc4, 0x48, 0x94, 0x45, 0xbb, 0x90, 0x3e, 0xaa, 0x95, 0x54, 0xad, 0x78, 0x78, 0x54, 0xa9, 0x97,
	0xd4, 0xec, 0x9c, 0xbc, 0xf1, 0xad, 0x0f, 0x3e, 0xf8, 0x72, 0xe2, 0xc7, 0xd9, 0xd6, 0xde, 0x16,
	0x73, 0xca, 0xad, 0x9e, 0x8b, 0x9d, 0x2d, 0xb4, 0x2e, 0x90, 0xdc, 0x2d, 0xb7, 0xd7, 0xd5, 0x0c,
	0xd3, 0xd3, 0xee, 0x6c, 0xa2, 0x3f, 0x90, 0x60, 0xb1, 0xb4, 0x5f, 0x3a, 0x28, 0x55, 0xea, 0x4c,
	0x52, 0x56, 0x92, 0x7f, 0x53, 0xa2, 0x82, 0x7e, 0x4d, 0x82, 0xeb, 0xa2, 0x24, 0x9e, 0xfe, 0xb4,
	0x86, 0xd5, 0x33, 0xbd, 0xad, 0x93, 0xdb, 0x63, 0x85, 0xca, 0xa9, 0x6a, 0xf1, 0x70, 0x7f, 0xbf,
	0x54, 0xac, 0x97, 0x0f, 0x2b, 0xca, 0xeb, 0x90, 0xf2, 0xe7, 0x36, 0x19, 0xff, 0xa7, 0xea, 0x8f,
	0x71, 0xde, 0xb3, 0x3c, 0xbd, 0x93, 0xe7, 0x02, 0xdd, 0x3c, 0x4b, 0x72, 0x79, 0xcf, 0xca, 0xeb,
	0x79, 0xa1, 0x1c, 0xcb, 0x1f, 0x9f, 0x11, 0x42, 0x50, 0xb8, 0x15, 0xd0, 0x3f, 0x49, 0x80, 0x6a,
	0xf5, 0x6d, 0xb5, 0xae, 0xed, 0x1c, 0x55, 0x76, 0xf7, 0x4b, 0xda, 0x41, 0xad, 0x54, 0xac, 0x65,
	0x23, 0xf2, 0x5f, 0x30, 0x95, 0xbf, 0x26, 0xc1, 0x1d, 0x51, 0x65, 0x5b, 0x77, 0x9a, 0xd6, 0x40,
	0xa8, 0xdc, 0x72, 0x3d, 0xdd, 0xf1, 0xfc, 0xb0, 0xd3, 0x75, 0x71, 0xc3, 0x3d, 0x77, 0x30, 0x50,
	0xad, 0xab, 0xdb, 0x95, 0xda, 0xfd, 0x43, 0xf5, 0x40, 0x79, 0x2b, 0x3c, 0x96, 0xb2, 0x30, 0x16,
	0xd7, 0x33, 0xba, 0xba, 0x87, 0x9b, 0xf9, 0x00, 0x2d, 0x4f, 0xd0, 0xf2, 0x56, 0x2b, 0xef, 0x3d,
	0xc6, 0x79, 0x0a, 0x9a, 0x67, 0xa0, 0xad, 0x9e, 0xc9, 0xc6, 0x67, 0x98, 0x79, 0x3d, 0x4f, 0x75,
	0x44, 0xff, 0x42, 0x22, 0xa5, 0x7a, 0x58, 0x2c, 0xd5, 0x6a, 0xe1, 0xb1, 0x45, 0xe5, 0x6f, 0xb0,
	0xb1, 0xfd, 0xb9, 0x04, 0x77, 0x2f, 0x1c, 0xdb, 0x40, 0x50, 0x9d, 0x6e, 0x74, 0x8f, 0xc2, 0xa3,
	0x7b, 0x63, 0xf2, 0xd1, 0x71, 0xd8, 0x73, 0xc6, 0xf7, 0x6d, 0x09, 0x56, 0xee, 0x97, 0x2b, 0xe5,
	0xda, 0x5e, 0x78, 0x78, 0x31, 0xf9, 0xeb, 0x6c, 0x78, 0x7f, 0x26, 0xc1, 0xcb, 0x17, 0x0e, 0xaf,
	0x65, 0x98, 0x86, 0xfb, 0xf8, 0xa3, 0x1e, 0x1d, 0x43, 0xe5, 0x83, 0xcb, 0x8f, 0x1a, 0xdd, 0x9f,
	0x4a, 0x90, 0xaa, 0x1f, 0xd6, 0xb7, 0xf7, 0xf9, 0xa8, 0xe2, 0xf2, 0x07, 0x6c, 0x54, 0xbf, 0x23,
	0xc1, 0x66, 0x68, 0x54, 0xfd, 0x8a, 0x74, 0x60, 0x68, 0x54, 0x95, 0x29, 0x87, 0x54, 0x0c, 0x0f,
	0x69, 0x73, 0x8a, 0x0f, 0x16, 0xe8, 0xa1, 0x14, 0x20, 0x17, 0x8e, 0x33, 0x34, 0x16, 0x56, 0x1d,
	0xcb, 0x76, 0x83, 0x0d, 0x71, 0xa9, 0xbf, 0x21, 0xae, 0xfc, 0x76, 0x1c, 0x32, 0x61, 0x86, 0x11,
	0xc1, 0x18, 0x41, 0x8c, 0x04, 0x5f, 0x7f, 0x27, 0x9d, 0x3c, 0x23, 0x1b, 0xd6, 0x84, 0xac, 0xe5,
	0xe9, 0xc7, 0x24, 0xeb, 0xeb, 0x9e, 0x4e, 0xcb, 0xeb, 0xd4, 0xc6, 0xd6, 0xd4, 0xa9, 0xab, 0x4e,
	0x44, 0xec, 0xea, 0x9e, 0xbe, 0x37, 0xa7, 0xae, 0x74, 0x87, 0xc9, 0xe8, 0x01, 0x24, 0x98, 0x05,
	0x69, 0xda, 0x9a, 0x7c, 0xcf, 0x9e, 0x25, 0xf6, 0xbd, 0x39, 0x95, 0xb3, 0xa3, 0xb7, 0x21, 0xc1,
	0xf3, 0x06, 0x5b, 0xe8, 0x6f, 0xcf, 0x94, 0x66, 0x0b, 0x2c, 0xcb, 0xf0, 0xf5, 0x3d, 0x13, 0x88,
	0xee, 0x42, 0x32, 0x38, 0xf5, 0xa0, 0x25, 0xf7, 0xf9, 0x55, 0x5c, 0xff, 0x65, 0xf9, 0x1e, 0xa4,
	0x04, 0x81, 0x93, 0x26, 0x16, 0xba, 0x62, 0xfa, 0x07, 0x09, 0x56, 0x47, 0x7c, 0x74, 0x17, 0xdd,
	0x80, 0x64, 0xe0, 0x5e, 0xd9, 0x39, 0x19, 0xbd, 0xff, 0x8f, 0xdf, 0xfd, 0x5e, 0x34, 0x0d, 0x82,
	0xd3, 0xa1, 0x4f, 0x80, 0x18, 0xde, 0xb3, 0x92, 0xbc, 0x42, 0x5f, 0x5a, 0x0c, 0x91, 0xd1, 0x06,
	0xa0, 0x87, 0xe5, 0xca, 0xee, 0xe1, 0xc3, 0x72, 0xe5, 0x81, 0x56, 0xab, 0xab, 0xdb, 0xf5, 0xd2,
	0x83, 0xb7, 0xb3, 0x11, 0x59, 0xa6, 0x2f, 0xaf, 0x8e, 0xea, 0x45, 0x39, 0x88, 0x17, 0x0f, 0x77,
	0x4b, 0x6a, 0x36, 0x2a, 0x2f, 0xd2, 0xd7, 0xe6, 0x39, 0x81, 0x60, 0x96, 0x2a, 0x6f, 0x96, 0xd5,
	0xc3, 0x0a, 0x49, 0x54, 0xd9, 0x58, 0x1f, 0x53, 0x20, 0xef, 0x24, 0x20, 0x46, 0xfc, 0x49, 0xf9,
	0xd7, 0xe8, 0x60, 0xc9, 0x70, 0xe4, 0x98, 0xae, 0xf2, 0xcd, 0x28, 0xcf, 0x9c, 0x9b, 0xb0, 0x2e,
	0x66, 0x4e, 0xed, 0x48, 0xad, 0x68, 0x55, 0xb5, 0x74, 0xbf, 0xfc, 0x56, 0x76, 0x4e, 0x5e, 0x7f,
	0xff, 0x8f, 0x7f, 0xf8, 0x8d, 0xf8, 0x88, 0x14, 0xfa, 0xd2, 0x70, 0xa2, 0x54, 0xe8, 0xbb, 0xe7,
	0x27, 0xc9, 0xfa, 0x98, 0x8c, 0xf5, 0x0a, 0xe5, 0x9d, 0x35, 0x5b, 0xbd, 0x35, 0x36, 0x5b, 0xbc,
	0x46, 0xe5, 0xce, 0x9e, 0x29, 0xde, 0x1c, 0x17, 0xa7, 0x5f, 0xa5, 0x82, 0x67, 0x8e, 0xd1, 0x6f,
	0x0c, 0x46, 0xc8, 0x2d, 0x2a, 0x6f, 0xa6, 0xe8, 0xa8, 0x7c, 0x4b, 0x82, 0x6b, 0xe1, 0x2f, 0x5c,
	0x67, 0xa5, 0x9e, 0xab, 0x7c, 0x4d, 0xe2, 0x5f, 0xf9, 0x36, 0x64, 0x6a, 0x47, 0x07, 0x5a, 0xb9,
	0x52, 0xbf, 0xb3, 0xa9, 0xd5, 0xdf, 0xae, 0x96, 0xb2, 0x73, 0xf2, 0xb3, 0x14, 0x73, 0x6c, 0x31,
	0x54, 0x84, 0xf5, 0xdd, 0x72, 0xad, 0xae, 0x96, 0x77, 0x8e, 0x88, 0x13, 0x8b, 0xbc, 0x92, 0xfc,
	0xff, 0x29, 0x6f, 0x3e, 0xc4, 0xdb, 0x34, 0x5c, 0xcf, 0x31, 0x8e, 0x99, 0xa2, 0x5c, 0xc8, 0xcb,
	0xb0, 0xbc, 0xbf, 0x5d, 0x2f, 0xd5, 0xea, 0x22, 0x7b, 0x44, 0xce, 0x53, 0x76, 0x39, 0xc4, 0xde,
	0xd1, 0x3d, 0xec, 0x7a, 0x9c, 0x51, 0xf9, 0x6a, 0x04, 0x12, 0x2c, 0xf2, 0xa0, 0x87, 0x90, 0xa6,
	0x0e, 0x84, 0x1d, 0x16, 0x21, 0xd9, 0xba, 0x64, 0x63, 0xc2, 0xa8, 0x53, 0x64, 0xac, 0x3c, 0x32,
	0xa6, 0x1a, 0xfd, 0x26, 0x6a, 0xc1, 0x72, 0x48, 0x67, 0x2a, 0x3d, 0x32, 0xd5, 0x61, 0xc9, 0xae,
	0xc0, 0xcf, 0x21, 0xb2, 0xcd, 0x01, 0x1a, 0x19, 0x00, 0x7e, 0xea, 0x39, 0xb8, 0xab, 0x8b, 0x21,
	0x7e, 0xd2, 0x01, 0x94, 0x18, 0xab, 0x3f, 0x00, 0xdc, 0x6f, 0x06, 0x73, 0xfc, 0x8b, 0x12, 0xa4,
	0x84, 0x71, 0xa2, 0x1b, 0x90, 0x32, 0x4c, 0xef, 0xce, 0xa6, 0xc6, 0x22, 0x1e, 0x31, 0x58, 0x74,
	0x6f, 0x4e, 0x05, 0x4a, 0x7c, 0x93, 0xd0, 0xd0, 0x73, 0x90, 0x6e, 0x5a, 0x3d, 0x92, 0x75, 0xfa,
	0x51, 0x51, 0x22, 0xf2, 0x19, 0x35, 0x78, 0x89, 0x0c, 0xc5, 0x6c, 0xf3, 0x97, 0x88, 0xe2, 0x49,
	0xf2, 0x12, 0xa3, 0xd2, 0x97, 0xfa, 0xcb, 0xf5, 0x7f, 0x97, 0x20, 0x25, 0x28, 0x8b, 0x74, 0xc8,
	0x92, 0x8f, 0x19, 0x1a, 0x3a, 0xfb, 0x76, 0x93, 0x2e, 0xcc, 0xca, 0xa6, 0x17, 0x1e, 0x7d, 0xc6,
	0x08, 0x51, 0xd0, 0x4f, 0xc3, 0x0a, 0x1f, 0x45, 0x08, 0x65, 0xba, 0x65, 0xfb, 0x2e, 0x95, 0x10,
	0x06, 0x5a, 0x6e, 0x0e, 0x12, 0x77, 0x92, 0x30, 0xcf, 0x41, 0x94, 0x5b, 0x90, 0x09, 0xab, 0x86,
	0x9e, 0x05, 0x62, 0x5c, 0x66, 0x26, 0x97, 0x1e, 0x8e, 0x44, 0xd5, 0xa4, 0x61, 0x7a, 0xd4, 0x44,
	0xae, 0x72, 0x17, 0x96, 0x87, 0x50, 0xd0, 0x73, 0xb0, 0x28, 0x7e, 0x02, 0xb6, 0x3e, 0x96, 0xd4,
	0xb4, 0xf0, 0x05, 0x5c, 0xe5, 0xbd, 0x08, 0x64, 0x07, 0x9d, 0x8c, 0x14, 0x0f, 0x04, 0x6d, 0xd8,
	0x79, 0xa5, 0xa9, 0x8a, 0x87, 0xb2, 0xe9, 0x8d, 0xf0, 0xdf, 0x15, 0x63, 0x98, 0x8c, 0xce, 0x20,
	0xc7, 0x75, 0x1d, 0x37, 0x63, 0x5e, 0x9d, 0xca, 0xda, 0x23, 0x70, 0xaf, 0x35, 0x47, 0xf6, 0xec,
	0x64, 0x20, 0x2d, 0x62, 0x2a, 0x3a, 0xac, 0x8c, 0x50, 0x9c, 0xe4, 0x77, 0x3a, 0xb7, 0x99, 0xb7,
	0xab, 0xac, 0x41, 0xea, 0x00, 0xb7, 0xd7, 0xa5, 0x2a, 0x46, 0x55, 0xf2, 0x48, 0x28, 0x5d, 0xc3,
	0xa4, 0xae, 0x1c, 0x55, 0xc9, 0x23, 0xa5, 0xe8, 0x4f, 0x69, 0x55, 0x44, 0x28, 0xfa, 0x53, 0xa5,
	0x09, 0xd7, 0x46, 0xab, 0x79, 0x31, 0x8a, 0x34, 0x84, 0x22, 0x0d, 0xa1, 0x48, 0x0c, 0xe5, 0xc3,
	0xa8, 0xb8, 0xa8, 0xed, 0x17, 0x6a, 0x37, 0x48, 0xbc, 0xeb, 0xf4, 0xba, 0xa6, 0x46, 0x4a, 0x4c,
	0xe6, 0x4d, 0x49, 0x12, 0xb9, 0x08, 0xad, 0x42, 0x48, 0xa8, 0x01, 0x0b, 0x8e, 0x75, 0xea, 0x9b,
	0x9f, 0x14, 0x61, 0x7b, 0xb3, 0x17, 0x8c, 0x02, 0x4d, 0xb5, 0x4e, 0xd5, 0x79, 0xc7, 0x3a, 0x25,
	0x64, 0xf9, 0xaf, 0x25, 0x58, 0xeb, 0x77, 0x15, 0x29, 0x3c, 0x8b, 0x0b, 0x1f, 0x65, 0x7c, 0x41,
	0x5b, 0x62, 0x4d, 0x18, 0xbb, 0xa8, 0x26, 0xdc, 0x9b, 0x13, 0xaa, 0xc2, 0x20, 0x36, 0xc9, 0x67,
	0xb0, 0x18, 0x1a, 0x25, 0x7a, 0x0c, 0x09, 0x61, 0xb2, 0x4e, 0x7e, 0x86, 0x74, 0xbe, 0xfd, 0x04,
	0x23, 0xa9, 0x5c, 0xbe, 0xf2, 0x95, 0x15, 0x98, 0xe7, 0x9b, 0x63, 0x48, 0x87, 0x94, 0x2d, 0x9c,
	0x4b, 0x4a, 0x53, 0x6d, 0x88, 0x71, 0x21, 0x85, 0xaa, 0x37, 0x70, 0x10, 0x29, 0xca, 0x94, 0xbf,
	0x93, 0x22, 0x05, 0xaa, 0xdf, 0x46, 0xef, 0x80, 0x7f, 0xca, 0x8c, 0x9b, 0x9a, 0xbf, 0xc7, 0xc0,
	0xe3, 0xc4, 0x1b, 0xd3, 0x02, 0xf7, 0x37, 0x1f, 0xaa, 0xbe, 0xcc, 0x12, 0x17, 0xa9, 0x2e, 0xdb,
	0x83, 0x24, 0xf4, 0x79, 0x58, 0xd2, 0x1b, 0xf4, 0x0a, 0x52, 0x00, 0xcc, 0x62, 0xc5, 0xde, 0xec,
	0xc0, 0xdb, 0x54, 0x60, 0x80, 0x9a, 0xd1, 0x43, 0x6d, 0x64, 0x00, 0x08, 0xc7, 0x10, 0x6c, 0x1b,
	0xb0, 0x3c, 0x3b, 0xda, 0xe0, 0x09, 0x84, 0x20, 0x1c, 0x3d, 0x80, 0x18, 0xa9, 0x85, 0xf9, 0xbe,
	0xd8, 0x8b, 0x53, 0x82, 0x1c, 0xb9, 0xd8, 0x51, 0xa9, 0x00, 0xf9, 0xc3, 0x28, 0x2c, 0x1c, 0x60,
	0xdd, 0xed, 0x39, 0xb8, 0x89, 0x7e, 0x45, 0x82, 0x55, 0x76, 0x08, 0x13, 0x2a, 0x9e, 0x7d, 0x5f,
	0x79, 0x34, 0xfb, 0x58, 0x7c, 0x88, 0x42, 0x99, 0x88, 0xe7, 0x16, 0xa3, 0x55, 0x03, 0x1f, 0x1c,
	0x32, 0x86, 0x3a, 0xd0, 0x7b, 0x12, 0xac, 0xf1, 0xe3, 0x9d, 0x01, 0x7d, 0x58, 0xd8, 0xf9, 0xec,
	0x15, 0xe8, 0xc3, 0x4e, 0x2c, 0x46, 0x28, 0xb4, 0x62, 0x0d, 0xf7, 0xa0, 0x9b, 0x90, 0x65, 0xf5,
	0x2f, 0x99, 0xe5, 0x9a, 0x6b, 0xfb, 0x47, 0x52, 0x92, 0x9a, 0xa1, 0x74, 0x12, 0x09, 0x6a, 0x84,
	0x2a, 0x97, 0x60, 0x7d, 0xcc, 0x50, 0x2f, 0x5a, 0x1e, 0x46, 0xc5, 0x23, 0x8f, 0xfb, 0x90, 0x1b,
	0xa7, 0xe1, 0x54, 0x72, 0x5c, 0x58, 0x1e, 0x9a, 0x35, 0xe8, 0x73, 0xb0, 0xd0, 0xe5, 0x76, 0xe0,
	0x93, 0x72, 0xe7, 0xf2, 0x16, 0x55, 0x03, 0x99, 0xf2, 0x7b, 0x51, 0xc8, 0x84, 0xa7, 0xcc, 0x8f,
	0x1a, 0x12, 0x3d, 0x0f, 0xa8, 0xe5, 0xe8, 0xfe, 0xae, 0x76, 0x57, 0x37, 0x4c, 0xc3, 0x6c, 0xf3,
	0xdc, 0xb8, 0xec, 0xf7, 0xa8, 0x7e, 0x07, 0xfa, 0x5d, 0x09, 0x9e, 0x09, 0x7b, 0x98, 0x2b, 0xb0,
	0xb1, 0x19, 0x8c, 0xaf, 0x2a, 0x5e, 0x84, 0x7d, 0xcd, 0x0d, 0xb4, 0x60, 0xfe, 0xb6, 0x6e, 0x8d,
	0xee, 0x95, 0x5f, 0x87, 0xeb, 0xe7, 0x31, 0x4e, 0xe5, 0x06, 0xaf, 0xc2, 0xd2, 0xc5, 0x87, 0x73,
	0xe3, 0xd9, 0xff, 0x2e, 0x0e, 0x31, 0x12, 0x3b, 0x90, 0x06, 0x29, 0xb6, 0x72, 0xd2, 0x82, 0x4d,
	0xa9, 0xc9, 0xef, 0xe3, 0x88, 0x51, 0x88, 0x37, 0x48, 0x61, 0xa1, 0x42, 0x37, 0x78, 0x46, 0x78,
	0x60, 0xd9, 0xc5, 0x2f, 0x7a, 0x7d, 0x7a, 0x16, 0x88, 0x73, 0x16, 0x61, 0xde, 0xa8, 0x45, 0xd8,
	0x94, 0x77, 0xbc, 0x42, 0x58, 0x13, 0x2d, 0xc9, 0x34, 0x80, 0xb6, 0xde, 0x6b, 0xf3, 0x3d, 0xb7,
	0x1f, 0x4c, 0x77, 0xc3, 0x2a, 0x04, 0xf7, 0x80, 0x88, 0xe1, 0x38, 0xc9, 0xb6, 0xdf, 0x90, 0x5f,
	0x03, 0xe8, 0xdb, 0x15, 0x5d, 0x87, 0x24, 0xad, 0xe5, 0x6c, 0xbd, 0xe1, 0x6f, 0x40, 0xf5, 0x09,
	0xc1, 0xc6, 0x62, 0x54, 0xb8, 0x69, 0xfb, 0x5c, 0x78, 0x45, 0x17, 0x38, 0x84, 0x24, 0x38, 0x84,
	0xfc, 0xb9, 0x11, 0x6b, 0x83, 0x2b, 0xac, 0x83, 0xe5, 0xcf, 0x42, 0x32, 0x18, 0xde, 0x68, 0x15,
	0xc2, 0x3b, 0x76, 0x91, 0x29, 0x76, 0xec, 0xfc, 0xc5, 0xab, 0x7c, 0x06, 0xd9, 0xc1, 0x8a, 0x66,
	0xc4, 0x8c, 0x38, 0x0c, 0x1f, 0x57, 0xdf, 0x9b, 0x39, 0x22, 0x88, 0x3b, 0x7f, 0x5f, 0x8d, 0xc0,
	0xb3, 0xe7, 0xde, 0x0f, 0xbc, 0xc2, 0xe3, 0xd0, 0x1f, 0xfd, 0x31, 0xe5, 0x4f, 0xc2, 0xa2, 0xed,
	0x18, 0x5d, 0xdd, 0x39, 0xe3, 0xe7, 0xad, 0xac, 0x32, 0x99, 0xfd, 0xf4, 0x3a, 0xcd, 0xc5, 0xd1,
	0x73, 0x56, 0xe5, 0x9f, 0xe3, 0xf0, 0xcc, 0xd8, 0x0b, 0xb5, 0x33, 0x1d, 0x67, 0xa2, 0x2f, 0x4a,
	0xb0, 0xcc, 0xaf, 0x5b, 0x84, 0x52, 0x05, 0x51, 0xfb, 0xcd, 0xcb, 0xde, 0xf1, 0x0d, 0x6e, 0x74,
	0x84, 0x83, 0x7c, 0xf6, 0x78, 0x80, 0x8c, 0xde, 0x81, 0x4c, 0x13, 0xbb, 0xf4, 0x3c, 0x94, 0xde,
	0xf1, 0xf4, 0xbf, 0x4b, 0xed, 0xd2, 0x1a, 0xec, 0x32, 0xb1, 0x94, 0xc6, 0x6b, 0x9a, 0xc5, 0xa6,
	0x48, 0x93, 0x8b, 0xb0, 0x36, 0x52, 0xcd, 0x8b, 0x72, 0x42, 0x5a, 0xcc, 0x09, 0x7f, 0x28, 0x41,
	0x5a, 0x84, 0x42, 0x1b, 0xb0, 0x16, 0xa4, 0x60, 0xab, 0xc5, 0x4d, 0xdb, 0xc4, 0xec, 0x0e, 0x7d,
	0x44, 0x5d, 0xf1, 0x3b, 0x0f, 0x5b, 0xaa, 0xdf, 0x85, 0x5e, 0x80, 0x55, 0xbd, 0xd3, 0xb1, 0x4e,
	0x7d, 0x2b, 0x68, 0xec, 0xf7, 0x05, 0x6a, 0x8b, 0xa8, 0x8a, 0x78, 0x1f, 0x95, 0x5f, 0xa5, 0x3d,
	0xe8, 0x2e, 0xe4, 0x82, 0x93, 0x15, 0x2d, 0x54, 0xb3, 0xba, 0x3c, 0xd0, 0x5c, 0x0b, 0xfa, 0xc5,
	0x42, 0xcc, 0x95, 0xdf, 0x93, 0x00, 0x0d, 0xdb, 0x66, 0xc4, 0x98, 0x1b, 0xe1, 0x59, 0x7f, 0x70,
	0xa5, 0x5f, 0x44, 0x8c, 0x04, 0xbf, 0x11, 0x03, 0x79, 0xfc, 0x5d, 0xdd, 0xe1, 0xa9, 0x25, 0x5d,
	0xe5, 0xd4, 0xfa, 0xc8, 0xae, 0x4a, 0xf4, 0x20, 0xd3, 0x78, 0xac, 0x9b, 0x26, 0xee, 0x84, 0x3d,
	0xbd, 0x72, 0xe9, 0xdb, 0xcc, 0x85, 0x22, 0x93, 0xcb, 0x88, 0x8b, 0x0d, 0xa1, 0xe5, 0xca, 0x7f,
	0x22, 0x41, 0x5a, 0xec, 0xbf, 0xf4, 0x6d, 0xb4, 0x17, 0x60, 0xb5, 0xa3, 0xbb, 0x9e, 0xe6, 0x7f,
	0x13, 0xf1, 0x6a, 0x5a, 0x5c, 0x45, 0xa4, 0xaf, 0xca, 0xba, 0xb8, 0xcb, 0xa1, 0x4d, 0xb8, 0xd6,
	0x32, 0x1c, 0xd7, 0xd3, 0x02, 0x3b, 0xfb, 0x3c, 0x31, 0xca, 0xb3, 0x4a, 0x7b, 0x55, 0xde, 0xc9,
	0xb9, 0x94, 0x7d, 0x58, 0x1b, 0x79, 0xa1, 0x7f, 0xb6, 0xcb, 0x1b, 0x39, 0xb8, 0x36, 0xfa, 0x6e,
	0xb6, 0xf2, 0xdf, 0x12, 0x2c, 0x04, 0xf5, 0xf9, 0x1e, 0xcb, 0x8b, 0xdc, 0xc5, 0x36, 0x27, 0xdd,
	0x25, 0xf6, 0x2b, 0x5c, 0x92, 0xab, 0x55, 0x96, 0x59, 0xbf, 0x2c, 0x41, 0x8c, 0xa6, 0xee, 0x99,
	0x82, 0x73, 0xff, 0x1f, 0x9f, 0xc8, 0x54, 0xe7, 0x85, 0xe1, 0x7f, 0x7c, 0x48, 0x71, 0x13, 0x6c,
	0x7a, 0xa7, 0x99, 0x62, 0xca, 0xfb, 0x51, 0x48, 0xd7, 0x3c, 0xdd, 0x0b, 0xec, 0x39, 0x78, 0x7d,
	0x7b, 0xac, 0xc2, 0x91, 0x73, 0x14, 0xde, 0x87, 0x24, 0xbb, 0xa6, 0x4b, 0x82, 0x08, 0xdb, 0x63,
	0xbf, 0x35, 0xa1, 0xce, 0x54, 0x99, 0x37, 0xf0, 0x99, 0xba, 0xe0, 0xf2, 0x27, 0xf4, 0x06, 0x44,
	0xc9, 0xd8, 0xa7, 0xfc, 0x77, 0x87, 0x0a, 0x7a, 0x80, 0x85, 0xff, 0x4c, 0x88, 0x14, 0x54, 0x87,
	0x84, 0x6e, 0xdb, 0xd8, 0x6c, 0xfa, 0x55, 0xf4, 0xbd, 0x69, 0xe4, 0x6d, 0x53, 0xd6, 0xbe, 0x48,
	0x2e, 0x0b, 0xfd, 0x04, 0xc4, 0x1b, 0x1d, 0xac, 0x3b, 0x7e, 0xb9, 0x7c, 0x77, 0x1a, 0xa1, 0x45,
	0xc2, 0xd9, 0x97, 0xc9, 0x24, 0x89, 0xff, 0xa5, 0x7c, 0x3b, 0x02, 0x8b, 0xfc, 0x23, 0xf1, 0x28,
	0x38, 0xf8, 0x95, 0x46, 0xff, 0x7a, 0xf2, 0x71, 0x48, 0x09, 0xd7, 0xcf, 0xf8, 0x77, 0x87, 0xfe,
	0xed, 0x33, 0xb4, 0x1f, 0xb2, 0xec, 0xcb, 0x53, 0x5b, 0x36, 0xf8, 0xa1, 0x81, 0x9a, 0xf6, 0x68,
	0xd0, 0xb4, 0x5b, 0xb3, 0x98, 0x36, 0x90, 0xe9, 0xdb, 0x56, 0x1d, 0xb0, 0xed, 0xbd, 0x19, 0x6c,
	0x1b, 0x08, 0xe5, 0xc6, 0x15, 0x7f, 0xb8, 0xf8, 0x7e, 0x0c, 0x16, 0x7c, 0xaf, 0x43, 0x55, 0x48,
	0xb0, 0x3f, 0x08, 0x79, 0x91, 0x79, 0x67, 0x4a, 0xb7, 0x2d, 0xa8, 0x94, 0x9b, 0xa8, 0xcf, 0xe4,
	0x20, 0x17, 0x56, 0xba, 0xbd, 0x0e, 0x49, 0xbe, 0xb6, 0xe6, 0x1a, 0x4d, 0xcc, 0xf2, 0x33, 0x9f,
	0xc9, 0xdb, 0xd3, 0x8a, 0x3f, 0xe0, 0xa2, 0x6a, 0x46, 0x13, 0xd3, 0x4c, 0xbe, 0x37, 0xa7, 0x2e,
	0x77, 0x07, 0x89, 0xa8, 0x09, 0x99, 0x63, 0xbd, 0xad, 0xf5, 0x5c, 0xec, 0x68, 0x74, 0x1e, 0xf1,
	0x59, 0xf8, 0xca, 0xb4, 0x78, 0x3b, 0x7a, 0x9b, 0xac, 0xad, 0x68, 0x7b, 0x6f, 0x4e, 0x4d, 0x1f,
	0x0b, 0x6d, 0x59, 0x86, 0x04, 0x1b, 0xae, 0x58, 0x2f, 0xa4, 0x69, 0xbd, 0x20, 0xbf, 0x2b, 0xc1,
	0xf2, 0x90, 0xb2, 0x93, 0xa5, 0x1b, 0x05, 0x16, 0xfb, 0x86, 0xea, 0xe7, 0x9c, 0x94, 0xeb, 0x8b,
	0x29, 0x37, 0xd1, 0x35, 0x48, 0xb0, 0x3f, 0x1f, 0xb8, 0x57, 0xf3, 0x96, 0xaf, 0x48, 0xac, 0xaf,
	0xc8, 0xcf, 0x4b, 0x90, 0x16, 0x47, 0x31, 0xb1, 0x0e, 0x7d, 0xe3, 0x09, 0x3a, 0xf4, 0x7c, 0x31,
	0xd3, 0xe8, 0x40, 0x16, 0x58, 0xde, 0x99, 0x8d, 0x95, 0xcf, 0xc0, 0xd2, 0x40, 0x58, 0x42, 0xcf,
	0x03, 0x6a, 0x58, 0xa6, 0x67, 0x98, 0x3d, 0x9d, 0x1d, 0x2b, 0xd3, 0xa9, 0xca, 0x0c, 0xb9, 0x2c,
	0xf6, 0xd0, 0x19, 0xab, 0x1c, 0x41, 0x76, 0x70, 0xfa, 0x4d, 0x29, 0x22, 0x48, 0x03, 0x11, 0x21,
	0x0d, 0xdc, 0x04, 0x34, 0x1c, 0xdf, 0x82, 0x37, 0x25, 0xe1, 0xcd, 0x35, 0x58, 0x19, 0x31, 0x5d,
	0x95, 0x15, 0x58, 0x1e, 0x8a, 0x65, 0xca, 0x2a, 0x97, 0x1a, 0x9a, 0x84, 0xca, 0xdf, 0xc7, 0x60,
	0x61, 0xdf, 0xe2, 0xc5, 0xf5, 0xdb, 0xb0, 0xe0, 0xe2, 0x13, 0xec, 0x18, 0x1e, 0xf3, 0x9e, 0xcc,
	0xc4, 0x4b, 0x7f, 0x5f, 0x44, 0xa1, 0xc6, 0xf9, 0xd9, 0x25, 0xef, 0x40, 0xdc, 0xec, 0xeb, 0x61,
	0x94, 0x23, 0x4b, 0x4d, 0xd7, 0xd5, 0xdb, 0xfe, 0x46, 0x80, 0xdf, 0x24, 0x71, 0xd6, 0x73, 0xf4,
	0x06, 0xa6, 0x1f, 0x37, 0xa9, 0xb2, 0xc6, 0xf8, 0x1c, 0x19, 0x3f, 0x27, 0x47, 0x5e, 0xf8, 0x63,
	0x70, 0xe2, 0xe2, 0x1f, 0x83, 0x6f, 0x40, 0x9a, 0x2c, 0xd8, 0x3a, 0x16, 0xbf, 0x24, 0x3d, 0xcf,
	0x9c, 0xb4, 0x63, 0xb5, 0xf7, 0x39, 0x89, 0x38, 0xa9, 0xf7, 0xd8, 0xc1, 0x7a, 0x33, 0xb7, 0x40,
	0x3b, 0x79, 0x4b, 0x7e, 0x8b, 0xff, 0x3f, 0x5c, 0x05, 0xf2, 0xba, 0x86, 0x4d, 0xcf, 0x31, 0x82,
	0x23, 0x98, 0x5b, 0x53, 0x7e, 0x03, 0x15, 0x3a, 0xec, 0xc9, 0xc0, 0xae, 0xec, 0xc0, 0x82, 0xff,
	0x49, 0x94, 0x16, 0xbf, 0xf4, 0xb0, 0x04, 0xa9, 0xa3, 0x4a, 0xad, 0x5a, 0x2a, 0x96, 0xef, 0x97,
	0x4b, 0xbb, 0xd9, 0x39, 0x94, 0x84, 0x78, 0x5d, 0xdd, 0x2e, 0x96, 0xb2, 0x12, 0x79, 0xdc, 0x2d,
	0xed, 0x1c, 0x3d, 0xc8, 0x46, 0xd0, 0x02, 0xc4, 0xca, 0x95, 0xfb, 0x87, 0xd9, 0x28, 0x02, 0x48,
	0x54, 0x0e, 0xeb, 0xe5, 0x62, 0x29, 0x1b, 0x23, 0xd4, 0x87, 0xdb, 0x6a, 0x25, 0x1b, 0x27, 0xaf,
	0x96, 0x54, 0xf5, 0x50, 0xcd, 0x26, 0x50, 0x1a, 0x16, 0x8a, 0x6a, 0xb9, 0x5e, 0x2e, 0x6e, 0xef,
	0x67, 0xe7, 0x95, 0x34, 0xc0, 0xbe, 0xd5, 0x2e, 0x5a, 0xa6, 0xe7, 0x58, 0x1d, 0xe5, 0x7f, 0x63,
	0x70, 0xbd, 0x62, 0x79, 0x46, 0xeb, 0x8c, 0x85, 0xa7, 0xed, 0x13, 0xdd, 0xe8, 0xe8, 0xc7, 0xfd,
	0xa2, 0xf1, 0x63, 0x90, 0x3c, 0xb5, 0x9c, 0x27, 0xec, 0x67, 0x63, 0x36, 0xfd, 0x17, 0x18, 0xa1,
	0xdc, 0x44, 0xc7, 0x90, 0x6d, 0x30, 0x41, 0x9a, 0xff, 0xeb, 0xf8, 0x05, 0x57, 0x11, 0x2e, 0xfc,
	0xaf, 0x68, 0x89, 0x0b, 0x2c, 0x71, 0x79, 0x04, 0xa3, 0x63, 0xb5, 0xdb, 0x86, 0xd9, 0xee, 0x63,
	0x44, 0x2f, 0x89, 0xc1, 0x05, 0x06, 0x18, 0x4d, 0x58, 0xd6, 0x1d, 0xcf, 0x68, 0xe9, 0x0d, 0xaf,
	0x0f, 0x12, 0xbb, 0x1c, 0x48, 0xd6, 0x97, 0x18, 0xa0, 0xb4, 0xe8, 0xa9, 0xd6, 0x89, 0xe1, 0x12,
	0xcf, 0x0f, 0x60, 0xe2, 0x97, 0x83, 0x59, 0x0e, 0x44, 0x06, 0x38, 0x6d, 0x48, 0xd8, 0xba, 0xa3,
	0x77, 0xdd, 0x1c, 0x50, 0x17, 0x3d, 0x9c, 0xd0, 0x45, 0xcf, 0xf3, 0x83, 0x42, 0x95, 0x4a, 0xe4,
	0x17, 0xdf, 0x98, 0x78, 0xf9, 0x1e, 0xa4, 0x04, 0xf2, 0x54, 0xd7, 0xd7, 0x5e, 0x82, 0x67, 0xc7,
	0xc0, 0xf1, 0x48, 0x1d, 0x94, 0x69, 0x92, 0x50, 0xa6, 0x6d, 0x7c, 0x45, 0x82, 0xc5, 0x1d, 0xac,
	0x77, 0xef, 0x9b, 0xdc, 0x81, 0xd1, 0xbb, 0x12, 0xcc, 0xfb, 0xcf, 0x93, 0x5f, 0x21, 0x18, 0xfa,
	0x71, 0x59, 0xbe, 0x37, 0x0b, 0x2f, 0x8b, 0xdd, 0x73, 0x37, 0xa5, 0x17, 0xa4, 0x8d, 0x2f, 0x00,
	0x30, 0xcd, 0xe8, 0xe2, 0xc5, 0xe4, 0x8b, 0x98, 0x5b, 0x53, 0xae, 0x84, 0xe4, 0x69, 0x19, 0x38,
	0xfa, 0x2f, 0x4a, 0x90, 0x62, 0xf0, 0x2c, 0x73, 0x3f, 0x85, 0x38, 0x7b, 0x78, 0x71, 0x9a, 0x32,
	0x86, 0x8f, 0x48, 0xde, 0x9c, 0x8e, 0x89, 0x67, 0x2b, 0xa6, 0xc9, 0x2f, 0x07, 0x9f, 0x68, 0x9f,
	0xcd, 0x32, 0xf4, 0x14, 0xe6, 0xfd, 0xc7, 0xcd, 0x69, 0x33, 0x16, 0x09, 0xbc, 0xf2, 0xed, 0xc9,
	0xb9, 0xfc, 0xb8, 0xc6, 0x74, 0xf9, 0xba, 0x04, 0x39, 0xa6, 0x4b, 0xe9, 0xa9, 0x87, 0x1d, 0x53,
	0xef, 0x3c, 0xa4, 0xa1, 0xab, 0x6a, 0x59, 0x1d, 0xf4, 0xfb, 0x12, 0xac, 0x8d, 0xf4, 0x41, 0x54,
	0xbc, 0x82, 0x09, 0x23, 0xef, 0x5e, 0x4e, 0x88, 0x6f, 0xd3, 0xad, 0x77, 0x25, 0x48, 0xd1, 0x8b,
	0xa6, 0x9a, 0x4d, 0x2f, 0xf4, 0xde, 0x18, 0x4a, 0xcc, 0x24, 0x6d, 0xd0, 0xd3, 0xfb, 0x43, 0x9b,
	0xfd, 0xf4, 0xf0, 0x57, 0x5f, 0xfa, 0xce, 0x2b, 0xd3, 0x1d, 0x7b, 0x8c, 0xb9, 0x3d, 0xac, 0x42,
	0x27, 0x78, 0xde, 0xfa, 0x75, 0x09, 0x56, 0x07, 0x36, 0x83, 0x35, 0xd7, 0xc6, 0x8d, 0x49, 0x34,
	0xfa, 0xe1, 0xff, 0x7c, 0x78, 0x3c, 0xdd, 0x16, 0xf8, 0xd0, 0x7f, 0x13, 0x2a, 0xea, 0x0e, 0xd1,
	0x76, 0xb6, 0xe1, 0x13, 0xe3, 0xe4, 0x89, 0xe2, 0x76, 0x92, 0xcc, 0x0b, 0xb6, 0x6d, 0xe3, 0x51,
	0x46, 0xe8, 0xd2, 0x4e, 0x6e, 0x1f, 0x27, 0xa8, 0xd6, 0x2f, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0xe6, 0x42, 0x0e, 0x4e, 0x45, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeamFnControlClient is the client API for BeamFnControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeamFnControlClient interface {
	// Instructions sent by the runner to the SDK requesting different types
	// of work.
	Control(ctx context.Context, opts ...grpc.CallOption) (BeamFnControl_ControlClient, error)
}

type beamFnControlClient struct {
	cc *grpc.ClientConn
}

func NewBeamFnControlClient(cc *grpc.ClientConn) BeamFnControlClient {
	return &beamFnControlClient{cc}
}

func (c *beamFnControlClient) Control(ctx context.Context, opts ...grpc.CallOption) (BeamFnControl_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeamFnControl_serviceDesc.Streams[0], "/org.apache.beam.model.fn_execution.v1.BeamFnControl/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &beamFnControlControlClient{stream}
	return x, nil
}

type BeamFnControl_ControlClient interface {
	Send(*InstructionResponse) error
	Recv() (*InstructionRequest, error)
	grpc.ClientStream
}

type beamFnControlControlClient struct {
	grpc.ClientStream
}

func (x *beamFnControlControlClient) Send(m *InstructionResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beamFnControlControlClient) Recv() (*InstructionRequest, error) {
	m := new(InstructionRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeamFnControlServer is the server API for BeamFnControl service.
type BeamFnControlServer interface {
	// Instructions sent by the runner to the SDK requesting different types
	// of work.
	Control(BeamFnControl_ControlServer) error
}

// UnimplementedBeamFnControlServer can be embedded to have forward compatible implementations.
type UnimplementedBeamFnControlServer struct {
}

func (*UnimplementedBeamFnControlServer) Control(srv BeamFnControl_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}

func RegisterBeamFnControlServer(s *grpc.Server, srv BeamFnControlServer) {
	s.RegisterService(&_BeamFnControl_serviceDesc, srv)
}

func _BeamFnControl_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeamFnControlServer).Control(&beamFnControlControlServer{stream})
}

type BeamFnControl_ControlServer interface {
	Send(*InstructionRequest) error
	Recv() (*InstructionResponse, error)
	grpc.ServerStream
}

type beamFnControlControlServer struct {
	grpc.ServerStream
}

func (x *beamFnControlControlServer) Send(m *InstructionRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beamFnControlControlServer) Recv() (*InstructionResponse, error) {
	m := new(InstructionResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BeamFnControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.BeamFnControl",
	HandlerType: (*BeamFnControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _BeamFnControl_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beam_fn_api.proto",
}

// BeamFnDataClient is the client API for BeamFnData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeamFnDataClient interface {
	// Used to send data between harnesses.
	Data(ctx context.Context, opts ...grpc.CallOption) (BeamFnData_DataClient, error)
}

type beamFnDataClient struct {
	cc *grpc.ClientConn
}

func NewBeamFnDataClient(cc *grpc.ClientConn) BeamFnDataClient {
	return &beamFnDataClient{cc}
}

func (c *beamFnDataClient) Data(ctx context.Context, opts ...grpc.CallOption) (BeamFnData_DataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeamFnData_serviceDesc.Streams[0], "/org.apache.beam.model.fn_execution.v1.BeamFnData/Data", opts...)
	if err != nil {
		return nil, err
	}
	x := &beamFnDataDataClient{stream}
	return x, nil
}

type BeamFnData_DataClient interface {
	Send(*Elements) error
	Recv() (*Elements, error)
	grpc.ClientStream
}

type beamFnDataDataClient struct {
	grpc.ClientStream
}

func (x *beamFnDataDataClient) Send(m *Elements) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beamFnDataDataClient) Recv() (*Elements, error) {
	m := new(Elements)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeamFnDataServer is the server API for BeamFnData service.
type BeamFnDataServer interface {
	// Used to send data between harnesses.
	Data(BeamFnData_DataServer) error
}

// UnimplementedBeamFnDataServer can be embedded to have forward compatible implementations.
type UnimplementedBeamFnDataServer struct {
}

func (*UnimplementedBeamFnDataServer) Data(srv BeamFnData_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}

func RegisterBeamFnDataServer(s *grpc.Server, srv BeamFnDataServer) {
	s.RegisterService(&_BeamFnData_serviceDesc, srv)
}

func _BeamFnData_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeamFnDataServer).Data(&beamFnDataDataServer{stream})
}

type BeamFnData_DataServer interface {
	Send(*Elements) error
	Recv() (*Elements, error)
	grpc.ServerStream
}

type beamFnDataDataServer struct {
	grpc.ServerStream
}

func (x *beamFnDataDataServer) Send(m *Elements) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beamFnDataDataServer) Recv() (*Elements, error) {
	m := new(Elements)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BeamFnData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.BeamFnData",
	HandlerType: (*BeamFnDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Data",
			Handler:       _BeamFnData_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beam_fn_api.proto",
}

// BeamFnStateClient is the client API for BeamFnState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeamFnStateClient interface {
	// Used to get/append/clear state stored by the runner on behalf of the SDK.
	State(ctx context.Context, opts ...grpc.CallOption) (BeamFnState_StateClient, error)
}

type beamFnStateClient struct {
	cc *grpc.ClientConn
}

func NewBeamFnStateClient(cc *grpc.ClientConn) BeamFnStateClient {
	return &beamFnStateClient{cc}
}

func (c *beamFnStateClient) State(ctx context.Context, opts ...grpc.CallOption) (BeamFnState_StateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeamFnState_serviceDesc.Streams[0], "/org.apache.beam.model.fn_execution.v1.BeamFnState/State", opts...)
	if err != nil {
		return nil, err
	}
	x := &beamFnStateStateClient{stream}
	return x, nil
}

type BeamFnState_StateClient interface {
	Send(*StateRequest) error
	Recv() (*StateResponse, error)
	grpc.ClientStream
}

type beamFnStateStateClient struct {
	grpc.ClientStream
}

func (x *beamFnStateStateClient) Send(m *StateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beamFnStateStateClient) Recv() (*StateResponse, error) {
	m := new(StateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeamFnStateServer is the server API for BeamFnState service.
type BeamFnStateServer interface {
	// Used to get/append/clear state stored by the runner on behalf of the SDK.
	State(BeamFnState_StateServer) error
}

// UnimplementedBeamFnStateServer can be embedded to have forward compatible implementations.
type UnimplementedBeamFnStateServer struct {
}

func (*UnimplementedBeamFnStateServer) State(srv BeamFnState_StateServer) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}

func RegisterBeamFnStateServer(s *grpc.Server, srv BeamFnStateServer) {
	s.RegisterService(&_BeamFnState_serviceDesc, srv)
}

func _BeamFnState_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeamFnStateServer).State(&beamFnStateStateServer{stream})
}

type BeamFnState_StateServer interface {
	Send(*StateResponse) error
	Recv() (*StateRequest, error)
	grpc.ServerStream
}

type beamFnStateStateServer struct {
	grpc.ServerStream
}

func (x *beamFnStateStateServer) Send(m *StateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beamFnStateStateServer) Recv() (*StateRequest, error) {
	m := new(StateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BeamFnState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.BeamFnState",
	HandlerType: (*BeamFnStateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _BeamFnState_State_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beam_fn_api.proto",
}

// BeamFnLoggingClient is the client API for BeamFnLogging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeamFnLoggingClient interface {
	// Allows for the SDK to emit log entries which the runner can
	// associate with the active job.
	Logging(ctx context.Context, opts ...grpc.CallOption) (BeamFnLogging_LoggingClient, error)
}

type beamFnLoggingClient struct {
	cc *grpc.ClientConn
}

func NewBeamFnLoggingClient(cc *grpc.ClientConn) BeamFnLoggingClient {
	return &beamFnLoggingClient{cc}
}

func (c *beamFnLoggingClient) Logging(ctx context.Context, opts ...grpc.CallOption) (BeamFnLogging_LoggingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeamFnLogging_serviceDesc.Streams[0], "/org.apache.beam.model.fn_execution.v1.BeamFnLogging/Logging", opts...)
	if err != nil {
		return nil, err
	}
	x := &beamFnLoggingLoggingClient{stream}
	return x, nil
}

type BeamFnLogging_LoggingClient interface {
	Send(*LogEntry_List) error
	Recv() (*LogControl, error)
	grpc.ClientStream
}

type beamFnLoggingLoggingClient struct {
	grpc.ClientStream
}

func (x *beamFnLoggingLoggingClient) Send(m *LogEntry_List) error {
	return x.ClientStream.SendMsg(m)
}

func (x *beamFnLoggingLoggingClient) Recv() (*LogControl, error) {
	m := new(LogControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeamFnLoggingServer is the server API for BeamFnLogging service.
type BeamFnLoggingServer interface {
	// Allows for the SDK to emit log entries which the runner can
	// associate with the active job.
	Logging(BeamFnLogging_LoggingServer) error
}

// UnimplementedBeamFnLoggingServer can be embedded to have forward compatible implementations.
type UnimplementedBeamFnLoggingServer struct {
}

func (*UnimplementedBeamFnLoggingServer) Logging(srv BeamFnLogging_LoggingServer) error {
	return status.Errorf(codes.Unimplemented, "method Logging not implemented")
}

func RegisterBeamFnLoggingServer(s *grpc.Server, srv BeamFnLoggingServer) {
	s.RegisterService(&_BeamFnLogging_serviceDesc, srv)
}

func _BeamFnLogging_Logging_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BeamFnLoggingServer).Logging(&beamFnLoggingLoggingServer{stream})
}

type BeamFnLogging_LoggingServer interface {
	Send(*LogControl) error
	Recv() (*LogEntry_List, error)
	grpc.ServerStream
}

type beamFnLoggingLoggingServer struct {
	grpc.ServerStream
}

func (x *beamFnLoggingLoggingServer) Send(m *LogControl) error {
	return x.ServerStream.SendMsg(m)
}

func (x *beamFnLoggingLoggingServer) Recv() (*LogEntry_List, error) {
	m := new(LogEntry_List)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BeamFnLogging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.BeamFnLogging",
	HandlerType: (*BeamFnLoggingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logging",
			Handler:       _BeamFnLogging_Logging_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "beam_fn_api.proto",
}

// BeamFnExternalWorkerPoolClient is the client API for BeamFnExternalWorkerPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeamFnExternalWorkerPoolClient interface {
	NotifyRunnerAvailable(ctx context.Context, in *NotifyRunnerAvailableRequest, opts ...grpc.CallOption) (*NotifyRunnerAvailableResponse, error)
}

type beamFnExternalWorkerPoolClient struct {
	cc *grpc.ClientConn
}

func NewBeamFnExternalWorkerPoolClient(cc *grpc.ClientConn) BeamFnExternalWorkerPoolClient {
	return &beamFnExternalWorkerPoolClient{cc}
}

func (c *beamFnExternalWorkerPoolClient) NotifyRunnerAvailable(ctx context.Context, in *NotifyRunnerAvailableRequest, opts ...grpc.CallOption) (*NotifyRunnerAvailableResponse, error) {
	out := new(NotifyRunnerAvailableResponse)
	err := c.cc.Invoke(ctx, "/org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool/NotifyRunnerAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeamFnExternalWorkerPoolServer is the server API for BeamFnExternalWorkerPool service.
type BeamFnExternalWorkerPoolServer interface {
	NotifyRunnerAvailable(context.Context, *NotifyRunnerAvailableRequest) (*NotifyRunnerAvailableResponse, error)
}

// UnimplementedBeamFnExternalWorkerPoolServer can be embedded to have forward compatible implementations.
type UnimplementedBeamFnExternalWorkerPoolServer struct {
}

func (*UnimplementedBeamFnExternalWorkerPoolServer) NotifyRunnerAvailable(ctx context.Context, req *NotifyRunnerAvailableRequest) (*NotifyRunnerAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRunnerAvailable not implemented")
}

func RegisterBeamFnExternalWorkerPoolServer(s *grpc.Server, srv BeamFnExternalWorkerPoolServer) {
	s.RegisterService(&_BeamFnExternalWorkerPool_serviceDesc, srv)
}

func _BeamFnExternalWorkerPool_NotifyRunnerAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRunnerAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeamFnExternalWorkerPoolServer).NotifyRunnerAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool/NotifyRunnerAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeamFnExternalWorkerPoolServer).NotifyRunnerAvailable(ctx, req.(*NotifyRunnerAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeamFnExternalWorkerPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.beam.model.fn_execution.v1.BeamFnExternalWorkerPool",
	HandlerType: (*BeamFnExternalWorkerPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRunnerAvailable",
			Handler:    _BeamFnExternalWorkerPool_NotifyRunnerAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beam_fn_api.proto",
}
